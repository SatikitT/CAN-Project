
CANbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003cbc  08003cbc  00004cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce4  08003ce4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ce4  08003ce4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ce4  08003ce4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce4  08003ce4  00004ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ce8  08003ce8  00004ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003cf8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003cf8  00005108  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa68  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  0000faaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  000115f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f5  00000000  00000000  00011f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f244  00000000  00000000  00012655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba5d  00000000  00000000  00031899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1428  00000000  00000000  0003d2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe71e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002598  00000000  00000000  000fe764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00100cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08003ca4 	.word	0x08003ca4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08003ca4 	.word	0x08003ca4

08000298 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d014      	beq.n	80002d6 <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80002ac:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80002ae:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80002b0:	2140      	movs	r1, #64	@ 0x40
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f001 f8ee 	bl	8001494 <HAL_FDCAN_GetRxMessage>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 80002be:	f000 fa47 	bl	8000750 <Error_Handler>
		}
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80002c2:	2200      	movs	r2, #0
 80002c4:	2101      	movs	r1, #1
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f001 f9ec 	bl	80016a4 <HAL_FDCAN_ActivateNotification>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 80002d2:	f000 fa3d 	bl	8000750 <Error_Handler>
		}
	}
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	200000fc 	.word	0x200000fc
 80002e4:	200000d4 	.word	0x200000d4

080002e8 <CAN_Send_Message>:

HAL_StatusTypeDef CAN_Send_Message(uint32_t identifier, uint8_t *data, uint8_t data_length)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	4613      	mov	r3, r2
 80002f4:	71fb      	strb	r3, [r7, #7]

    TxHeader.Identifier = identifier;
 80002f6:	4a13      	ldr	r2, [pc, #76]	@ (8000344 <CAN_Send_Message+0x5c>)
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <CAN_Send_Message+0x5c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <CAN_Send_Message+0x5c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000308:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <CAN_Send_Message+0x5c>)
 800030a:	2208      	movs	r2, #8
 800030c:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800030e:	4b0d      	ldr	r3, [pc, #52]	@ (8000344 <CAN_Send_Message+0x5c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000314:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <CAN_Send_Message+0x5c>)
 8000316:	2200      	movs	r2, #0
 8000318:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <CAN_Send_Message+0x5c>)
 800031c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000320:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <CAN_Send_Message+0x5c>)
 8000324:	2200      	movs	r2, #0
 8000326:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <CAN_Send_Message+0x5c>)
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]

    return HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data);
 800032e:	68ba      	ldr	r2, [r7, #8]
 8000330:	4904      	ldr	r1, [pc, #16]	@ (8000344 <CAN_Send_Message+0x5c>)
 8000332:	4805      	ldr	r0, [pc, #20]	@ (8000348 <CAN_Send_Message+0x60>)
 8000334:	f001 f86a 	bl	800140c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000338:	4603      	mov	r3, r0
}
 800033a:	4618      	mov	r0, r3
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000b0 	.word	0x200000b0
 8000348:	2000004c 	.word	0x2000004c

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000352:	f000 fb75 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000356:	f000 f8a7 	bl	80004a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035a:	f000 f98f 	bl	800067c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800035e:	f000 f933 	bl	80005c8 <MX_FDCAN1_Init>
  MX_ICACHE_Init();
 8000362:	f000 f977 	bl	8000654 <MX_ICACHE_Init>
  MX_CRC_Init();
 8000366:	f000 f90d 	bl	8000584 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800036a:	4848      	ldr	r0, [pc, #288]	@ (800048c <main+0x140>)
 800036c:	f001 f826 	bl	80013bc <HAL_FDCAN_Start>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <main+0x2e>
  {
	Error_Handler();
 8000376:	f000 f9eb 	bl	8000750 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800037a:	2200      	movs	r2, #0
 800037c:	2101      	movs	r1, #1
 800037e:	4843      	ldr	r0, [pc, #268]	@ (800048c <main+0x140>)
 8000380:	f001 f990 	bl	80016a4 <HAL_FDCAN_ActivateNotification>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <main+0x42>
  {
	/* Notification Error */
	Error_Handler();
 800038a:	f000 f9e1 	bl	8000750 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0)
 800038e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000392:	483f      	ldr	r0, [pc, #252]	@ (8000490 <main+0x144>)
 8000394:	f001 fe1e 	bl	8001fd4 <HAL_GPIO_ReadPin>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d117      	bne.n	80003ce <main+0x82>
	{
		// Standard CAN Data Frame
		uint8_t data_to_send[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
 800039e:	4a3d      	ldr	r2, [pc, #244]	@ (8000494 <main+0x148>)
 80003a0:	f107 0308 	add.w	r3, r7, #8
 80003a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a8:	e883 0003 	stmia.w	r3, {r0, r1}
		CAN_Send_Message(0x01, data_to_send, 8);
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	2208      	movs	r2, #8
 80003b2:	4619      	mov	r1, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	f7ff ff97 	bl	80002e8 <CAN_Send_Message>
		CAN_Send_Message(0x01, data_to_send, 8);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2208      	movs	r2, #8
 80003c0:	4619      	mov	r1, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	f7ff ff90 	bl	80002e8 <CAN_Send_Message>

		HAL_Delay(200); // debounce
 80003c8:	20c8      	movs	r0, #200	@ 0xc8
 80003ca:	f000 fbf7 	bl	8000bbc <HAL_Delay>
	}

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 80003ce:	2108      	movs	r1, #8
 80003d0:	4831      	ldr	r0, [pc, #196]	@ (8000498 <main+0x14c>)
 80003d2:	f001 fdff 	bl	8001fd4 <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d115      	bne.n	8000408 <main+0xbc>
	{
		// Standard CAN Remote Frame
		TxHeader.Identifier = 0x200;
 80003dc:	4b2f      	ldr	r3, [pc, #188]	@ (800049c <main+0x150>)
 80003de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003e2:	601a      	str	r2, [r3, #0]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 80003e4:	4b2d      	ldr	r3, [pc, #180]	@ (800049c <main+0x150>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
		TxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 80003ea:	4b2c      	ldr	r3, [pc, #176]	@ (800049c <main+0x150>)
 80003ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80003f0:	609a      	str	r2, [r3, #8]
		TxHeader.DataLength = FDCAN_DLC_BYTES_0;
 80003f2:	4b2a      	ldr	r3, [pc, #168]	@ (800049c <main+0x150>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, NULL);
 80003f8:	2200      	movs	r2, #0
 80003fa:	4928      	ldr	r1, [pc, #160]	@ (800049c <main+0x150>)
 80003fc:	4823      	ldr	r0, [pc, #140]	@ (800048c <main+0x140>)
 80003fe:	f001 f805 	bl	800140c <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(200); // debounce
 8000402:	20c8      	movs	r0, #200	@ 0xc8
 8000404:	f000 fbda 	bl	8000bbc <HAL_Delay>
	}

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 8000408:	2110      	movs	r1, #16
 800040a:	4823      	ldr	r0, [pc, #140]	@ (8000498 <main+0x14c>)
 800040c:	f001 fde2 	bl	8001fd4 <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d11b      	bne.n	800044e <main+0x102>
	{
		// Extended CAN Data Frame
		TxHeader.Identifier = 0x18FF50E5;
 8000416:	4b21      	ldr	r3, [pc, #132]	@ (800049c <main+0x150>)
 8000418:	4a21      	ldr	r2, [pc, #132]	@ (80004a0 <main+0x154>)
 800041a:	601a      	str	r2, [r3, #0]
		TxHeader.IdType = FDCAN_EXTENDED_ID;
 800041c:	4b1f      	ldr	r3, [pc, #124]	@ (800049c <main+0x150>)
 800041e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000422:	605a      	str	r2, [r3, #4]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000424:	4b1d      	ldr	r3, [pc, #116]	@ (800049c <main+0x150>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
		TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800042a:	4b1c      	ldr	r3, [pc, #112]	@ (800049c <main+0x150>)
 800042c:	2208      	movs	r2, #8
 800042e:	60da      	str	r2, [r3, #12]
		uint8_t extData[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
 8000430:	4a18      	ldr	r2, [pc, #96]	@ (8000494 <main+0x148>)
 8000432:	463b      	mov	r3, r7
 8000434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000438:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, extData);
 800043c:	463b      	mov	r3, r7
 800043e:	461a      	mov	r2, r3
 8000440:	4916      	ldr	r1, [pc, #88]	@ (800049c <main+0x150>)
 8000442:	4812      	ldr	r0, [pc, #72]	@ (800048c <main+0x140>)
 8000444:	f000 ffe2 	bl	800140c <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(200); // debounce
 8000448:	20c8      	movs	r0, #200	@ 0xc8
 800044a:	f000 fbb7 	bl	8000bbc <HAL_Delay>
	}

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 800044e:	2120      	movs	r1, #32
 8000450:	4811      	ldr	r0, [pc, #68]	@ (8000498 <main+0x14c>)
 8000452:	f001 fdbf 	bl	8001fd4 <HAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d198      	bne.n	800038e <main+0x42>
	{
		// Extended CAN Remote Frame
		TxHeader.Identifier = 0x18FFFFEE;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <main+0x150>)
 800045e:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <main+0x158>)
 8000460:	601a      	str	r2, [r3, #0]
		TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <main+0x150>)
 8000464:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000468:	605a      	str	r2, [r3, #4]
		TxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 800046a:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <main+0x150>)
 800046c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000470:	609a      	str	r2, [r3, #8]
		TxHeader.DataLength = FDCAN_DLC_BYTES_0;
 8000472:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <main+0x150>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, NULL);
 8000478:	2200      	movs	r2, #0
 800047a:	4908      	ldr	r1, [pc, #32]	@ (800049c <main+0x150>)
 800047c:	4803      	ldr	r0, [pc, #12]	@ (800048c <main+0x140>)
 800047e:	f000 ffc5 	bl	800140c <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(200); // debounce
 8000482:	20c8      	movs	r0, #200	@ 0xc8
 8000484:	f000 fb9a 	bl	8000bbc <HAL_Delay>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0)
 8000488:	e781      	b.n	800038e <main+0x42>
 800048a:	bf00      	nop
 800048c:	2000004c 	.word	0x2000004c
 8000490:	42020800 	.word	0x42020800
 8000494:	08003cbc 	.word	0x08003cbc
 8000498:	42020400 	.word	0x42020400
 800049c:	200000b0 	.word	0x200000b0
 80004a0:	18ff50e5 	.word	0x18ff50e5
 80004a4:	18ffffee 	.word	0x18ffffee

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09c      	sub	sp, #112	@ 0x70
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0320 	add.w	r3, r7, #32
 80004b2:	2250      	movs	r2, #80	@ 0x50
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fbc8 	bl	8003c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	f107 0308 	add.w	r3, r7, #8
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
 80004cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000580 <SystemClock_Config+0xd8>)
 80004d0:	691b      	ldr	r3, [r3, #16]
 80004d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000580 <SystemClock_Config+0xd8>)
 80004d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80004d8:	6113      	str	r3, [r2, #16]
 80004da:	4b29      	ldr	r3, [pc, #164]	@ (8000580 <SystemClock_Config+0xd8>)
 80004dc:	691b      	ldr	r3, [r3, #16]
 80004de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e6:	bf00      	nop
 80004e8:	4b25      	ldr	r3, [pc, #148]	@ (8000580 <SystemClock_Config+0xd8>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	f003 0308 	and.w	r3, r3, #8
 80004f0:	2b08      	cmp	r3, #8
 80004f2:	d1f9      	bne.n	80004e8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 80004f4:	2312      	movs	r3, #18
 80004f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	2301      	movs	r3, #1
 80004fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80004fc:	2308      	movs	r3, #8
 80004fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	2340      	movs	r3, #64	@ 0x40
 8000502:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800050a:	2320      	movs	r3, #32
 800050c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	2302      	movs	r3, #2
 8000510:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000512:	2302      	movs	r3, #2
 8000514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000516:	2301      	movs	r3, #1
 8000518:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 800051a:	2332      	movs	r3, #50	@ 0x32
 800051c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800051e:	2302      	movs	r3, #2
 8000520:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000522:	2304      	movs	r3, #4
 8000524:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000526:	2302      	movs	r3, #2
 8000528:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800052a:	2308      	movs	r3, #8
 800052c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800052e:	2300      	movs	r3, #0
 8000530:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fd92 	bl	8002064 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000546:	f000 f903 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	231f      	movs	r3, #31
 800054c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2101      	movs	r1, #1
 8000568:	4618      	mov	r0, r3
 800056a:	f002 f9b3 	bl	80028d4 <HAL_RCC_ClockConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000574:	f000 f8ec 	bl	8000750 <Error_Handler>
  }
}
 8000578:	bf00      	nop
 800057a:	3770      	adds	r7, #112	@ 0x70
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	44020800 	.word	0x44020800

08000584 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <MX_CRC_Init+0x3c>)
 800058a:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <MX_CRC_Init+0x40>)
 800058c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_CRC_Init+0x3c>)
 8000590:	2200      	movs	r2, #0
 8000592:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <MX_CRC_Init+0x3c>)
 8000596:	2200      	movs	r2, #0
 8000598:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_CRC_Init+0x3c>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <MX_CRC_Init+0x3c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_CRC_Init+0x3c>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_CRC_Init+0x3c>)
 80005ae:	f000 fcb9 	bl	8000f24 <HAL_CRC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005b8:	f000 f8ca 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000028 	.word	0x20000028
 80005c4:	40023000 	.word	0x40023000

080005c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005ce:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <MX_FDCAN1_Init+0x88>)
 80005d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005f8:	220a      	movs	r2, #10
 80005fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <MX_FDCAN1_Init+0x84>)
 80005fe:	2201      	movs	r2, #1
 8000600:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000604:	2208      	movs	r2, #8
 8000606:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000608:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_FDCAN1_Init+0x84>)
 800060a:	2201      	movs	r2, #1
 800060c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000610:	2201      	movs	r2, #1
 8000612:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000614:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000616:	2201      	movs	r2, #1
 8000618:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_FDCAN1_Init+0x84>)
 800061c:	2201      	movs	r2, #1
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000622:	2201      	movs	r2, #1
 8000624:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000628:	2200      	movs	r2, #0
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <MX_FDCAN1_Init+0x84>)
 800062e:	2200      	movs	r2, #0
 8000630:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_FDCAN1_Init+0x84>)
 8000634:	2200      	movs	r2, #0
 8000636:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <MX_FDCAN1_Init+0x84>)
 800063a:	f000 fd65 	bl	8001108 <HAL_FDCAN_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000644:	f000 f884 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000004c 	.word	0x2000004c
 8000650:	4000a400 	.word	0x4000a400

08000654 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000658:	2000      	movs	r0, #0
 800065a:	f001 fcd3 	bl	8002004 <HAL_ICACHE_ConfigAssociativityMode>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000664:	f000 f874 	bl	8000750 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000668:	f001 fcec 	bl	8002044 <HAL_ICACHE_Enable>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000672:	f000 f86d 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <MX_GPIO_Init+0xc4>)
 8000694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000698:	4a29      	ldr	r2, [pc, #164]	@ (8000740 <MX_GPIO_Init+0xc4>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006a2:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <MX_GPIO_Init+0xc4>)
 80006a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b0:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_GPIO_Init+0xc4>)
 80006b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b6:	4a22      	ldr	r2, [pc, #136]	@ (8000740 <MX_GPIO_Init+0xc4>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <MX_GPIO_Init+0xc4>)
 80006c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <MX_GPIO_Init+0xc4>)
 80006d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000740 <MX_GPIO_Init+0xc4>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_GPIO_Init+0xc4>)
 80006e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4810      	ldr	r0, [pc, #64]	@ (8000744 <MX_GPIO_Init+0xc8>)
 8000702:	f001 fb15 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	480b      	ldr	r0, [pc, #44]	@ (8000748 <MX_GPIO_Init+0xcc>)
 800071c:	f001 fb08 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000720:	2338      	movs	r3, #56	@ 0x38
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	@ (800074c <MX_GPIO_Init+0xd0>)
 8000734:	f001 fafc 	bl	8001d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	44020c00 	.word	0x44020c00
 8000744:	42020800 	.word	0x42020800
 8000748:	42020000 	.word	0x42020000
 800074c:	42020400 	.word	0x42020400

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <Error_Handler+0x8>

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <HAL_CRC_MspInit+0x3c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d10e      	bne.n	800079c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <HAL_CRC_MspInit+0x40>)
 8000780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000784:	4a09      	ldr	r2, [pc, #36]	@ (80007ac <HAL_CRC_MspInit+0x40>)
 8000786:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800078a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <HAL_CRC_MspInit+0x40>)
 8000790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023000 	.word	0x40023000
 80007ac:	44020c00 	.word	0x44020c00

080007b0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0ac      	sub	sp, #176	@ 0xb0
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2288      	movs	r2, #136	@ 0x88
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fa3b 	bl	8003c4c <memset>
  if(hfdcan->Instance==FDCAN1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a2b      	ldr	r2, [pc, #172]	@ (8000888 <HAL_FDCAN_MspInit+0xd8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d14e      	bne.n	800087e <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007e0:	f04f 0200 	mov.w	r2, #0
 80007e4:	f04f 0304 	mov.w	r3, #4
 80007e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 80007ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fb6c 	bl	8002ed4 <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000802:	f7ff ffa5 	bl	8000750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <HAL_FDCAN_MspInit+0xdc>)
 8000808:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800080c:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <HAL_FDCAN_MspInit+0xdc>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000812:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <HAL_FDCAN_MspInit+0xdc>)
 8000818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800081c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_FDCAN_MspInit+0xdc>)
 8000826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082a:	4a18      	ldr	r2, [pc, #96]	@ (800088c <HAL_FDCAN_MspInit+0xdc>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_FDCAN_MspInit+0xdc>)
 8000836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB10     ------> FDCAN1_TX
    PB12     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000842:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800085c:	2309      	movs	r3, #9
 800085e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000866:	4619      	mov	r1, r3
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <HAL_FDCAN_MspInit+0xe0>)
 800086a:	f001 fa61 	bl	8001d30 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2027      	movs	r0, #39	@ 0x27
 8000874:	f000 fa7e 	bl	8000d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000878:	2027      	movs	r0, #39	@ 0x27
 800087a:	f000 fa95 	bl	8000da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	37b0      	adds	r7, #176	@ 0xb0
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	4000a400 	.word	0x4000a400
 800088c:	44020c00 	.word	0x44020c00
 8000890:	42020400 	.word	0x42020400

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <NMI_Handler+0x4>

0800089c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <MemManage_Handler+0x4>

080008ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <UsageFault_Handler+0x4>

080008bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 f947 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <FDCAN1_IT0_IRQHandler+0x10>)
 80008fa:	f000 ffb9 	bl	8001870 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000004c 	.word	0x2000004c

08000908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800090e:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <SystemInit+0xc8>)
 8000910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000914:	4a2e      	ldr	r2, [pc, #184]	@ (80009d0 <SystemInit+0xc8>)
 8000916:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <SystemInit+0xcc>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000924:	4b2b      	ldr	r3, [pc, #172]	@ (80009d4 <SystemInit+0xcc>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <SystemInit+0xcc>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000930:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <SystemInit+0xcc>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4927      	ldr	r1, [pc, #156]	@ (80009d4 <SystemInit+0xcc>)
 8000936:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <SystemInit+0xd0>)
 8000938:	4013      	ands	r3, r2
 800093a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800093c:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <SystemInit+0xcc>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <SystemInit+0xcc>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <SystemInit+0xcc>)
 800094a:	4a24      	ldr	r2, [pc, #144]	@ (80009dc <SystemInit+0xd4>)
 800094c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <SystemInit+0xcc>)
 8000950:	2200      	movs	r2, #0
 8000952:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <SystemInit+0xcc>)
 8000956:	4a21      	ldr	r2, [pc, #132]	@ (80009dc <SystemInit+0xd4>)
 8000958:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <SystemInit+0xcc>)
 800095c:	2200      	movs	r2, #0
 800095e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <SystemInit+0xcc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a1b      	ldr	r2, [pc, #108]	@ (80009d4 <SystemInit+0xcc>)
 8000966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800096a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800096c:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <SystemInit+0xcc>)
 800096e:	2200      	movs	r2, #0
 8000970:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <SystemInit+0xc8>)
 8000974:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000978:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <SystemInit+0xd8>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000982:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800098a:	d003      	beq.n	8000994 <SystemInit+0x8c>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000992:	d117      	bne.n	80009c4 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <SystemInit+0xd8>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <SystemInit+0xd8>)
 80009a2:	4a10      	ldr	r2, [pc, #64]	@ (80009e4 <SystemInit+0xdc>)
 80009a4:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <SystemInit+0xd8>)
 80009a8:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <SystemInit+0xe0>)
 80009aa:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <SystemInit+0xd8>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <SystemInit+0xd8>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <SystemInit+0xd8>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <SystemInit+0xd8>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	61d3      	str	r3, [r2, #28]
  }
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00
 80009d4:	44020c00 	.word	0x44020c00
 80009d8:	fae2eae3 	.word	0xfae2eae3
 80009dc:	01010280 	.word	0x01010280
 80009e0:	40022000 	.word	0x40022000
 80009e4:	08192a3b 	.word	0x08192a3b
 80009e8:	4c5d6e7f 	.word	0x4c5d6e7f

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a24 <LoopForever+0x2>


/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009f2:	e003      	b.n	80009fc <LoopCopyDataInit>

080009f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009fa:	3104      	adds	r1, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009fc:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <LoopForever+0xa>)
	ldr	r3, =_edata
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a04:	d3f6      	bcc.n	80009f4 <CopyDataInit>
	ldr	r2, =_sbss
 8000a06:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a08:	e002      	b.n	8000a10 <LoopFillZerobss>

08000a0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a0c:	f842 3b04 	str.w	r3, [r2], #4

08000a10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <LoopForever+0x16>)
	cmp	r2, r3
 8000a12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a14:	d3f9      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a16:	f7ff ff77 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f003 f91f 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fc95 	bl	800034c <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a24:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000a28:	08003cec 	.word	0x08003cec
	ldr	r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a30:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a38:	20000108 	.word	0x20000108

08000a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f98a 	bl	8000d5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a4a:	f002 f8fb 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_Init+0x44>)
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	490b      	ldr	r1, [pc, #44]	@ (8000a88 <HAL_Init+0x48>)
 8000a5a:	5ccb      	ldrb	r3, [r1, r3]
 8000a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a60:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_Init+0x4c>)
 8000a62:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a64:	2004      	movs	r0, #4
 8000a66:	f000 f9cf 	bl	8000e08 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f000 f810 	bl	8000a90 <HAL_InitTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e002      	b.n	8000a80 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7a:	f7ff fe6f 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	44020c00 	.word	0x44020c00
 8000a88:	08003cc4 	.word	0x08003cc4
 8000a8c:	20000000 	.word	0x20000000

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <HAL_InitTick+0xdc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e05c      	b.n	8000b62 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000aa8:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <HAL_InitTick+0xe0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d10c      	bne.n	8000ace <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <HAL_InitTick+0xe4>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <HAL_InitTick+0xdc>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e037      	b.n	8000b3e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000ace:	f000 f9f3 	bl	8000eb8 <HAL_SYSTICK_GetCLKSourceConfig>
 8000ad2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d023      	beq.n	8000b22 <HAL_InitTick+0x92>
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d82d      	bhi.n	8000b3c <HAL_InitTick+0xac>
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_InitTick+0x5e>
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d00d      	beq.n	8000b08 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000aec:	e026      	b.n	8000b3c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000aee:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <HAL_InitTick+0xe4>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <HAL_InitTick+0xdc>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000afc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	60fb      	str	r3, [r7, #12]
        break;
 8000b06:	e01a      	b.n	8000b3e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <HAL_InitTick+0xdc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b16:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	60fb      	str	r3, [r7, #12]
        break;
 8000b20:	e00d      	b.n	8000b3e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b22:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_InitTick+0xdc>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b38:	60fb      	str	r3, [r7, #12]
        break;
 8000b3a:	e000      	b.n	8000b3e <HAL_InitTick+0xae>
        break;
 8000b3c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f000 f940 	bl	8000dc4 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e009      	b.n	8000b62 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	f04f 30ff 	mov.w	r0, #4294967295
 8000b56:	f000 f90d 	bl	8000d74 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_InitTick+0xe8>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	e000e010 	.word	0xe000e010
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000104 	.word	0x20000104

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000104 	.word	0x20000104

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_Delay+0x44>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffde 	bl	8000ba4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	@ (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	@ (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	@ (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	@ 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	@ 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff4c 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d82:	f7ff ff63 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	6978      	ldr	r0, [r7, #20]
 8000d8e:	f7ff ffb3 	bl	8000cf8 <NVIC_EncodePriority>
 8000d92:	4602      	mov	r2, r0
 8000d94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff82 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff56 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00d      	b.n	8000df6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <HAL_SYSTICK_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_SYSTICK_Config+0x40>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_SYSTICK_Config+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <HAL_SYSTICK_Config+0x40>)
 8000dee:	f043 0303 	orr.w	r3, r3, #3
 8000df2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d844      	bhi.n	8000ea0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000e16:	a201      	add	r2, pc, #4	@ (adr r2, 8000e1c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e3f 	.word	0x08000e3f
 8000e20:	08000e5d 	.word	0x08000e5d
 8000e24:	08000e7f 	.word	0x08000e7f
 8000e28:	08000ea1 	.word	0x08000ea1
 8000e2c:	08000e31 	.word	0x08000e31
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e30:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6013      	str	r3, [r2, #0]
      break;
 8000e3c:	e031      	b.n	8000ea2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e44:	f023 0304 	bic.w	r3, r3, #4
 8000e48:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e50:	4a18      	ldr	r2, [pc, #96]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e52:	f023 030c 	bic.w	r3, r3, #12
 8000e56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e5a:	e022      	b.n	8000ea2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a13      	ldr	r2, [pc, #76]	@ (8000eb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e62:	f023 0304 	bic.w	r3, r3, #4
 8000e66:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e6e:	f023 030c 	bic.w	r3, r3, #12
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e7c:	e011      	b.n	8000ea2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e84:	f023 0304 	bic.w	r3, r3, #4
 8000e88:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e90:	f023 030c 	bic.w	r3, r3, #12
 8000e94:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e9e:	e000      	b.n	8000ea2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ea0:	bf00      	nop
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010
 8000eb4:	44020c00 	.word	0x44020c00

08000eb8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	e01e      	b.n	8000f0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000ed2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d00f      	beq.n	8000f02 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d80f      	bhi.n	8000f08 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d003      	beq.n	8000efc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000ef4:	e008      	b.n	8000f08 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
        break;
 8000efa:	e008      	b.n	8000f0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000efc:	2301      	movs	r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
        break;
 8000f00:	e005      	b.n	8000f0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000f02:	2302      	movs	r3, #2
 8000f04:	607b      	str	r3, [r7, #4]
        break;
 8000f06:	e002      	b.n	8000f0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
        break;
 8000f0c:	bf00      	nop
    }
  }
  return systick_source;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e010 	.word	0xe000e010
 8000f20:	44020c00 	.word	0x44020c00

08000f24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e054      	b.n	8000fe0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7f5b      	ldrb	r3, [r3, #29]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fc10 	bl	800076c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	791b      	ldrb	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10c      	bne.n	8000f74 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a22      	ldr	r2, [pc, #136]	@ (8000fe8 <HAL_CRC_Init+0xc4>)
 8000f60:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0218 	bic.w	r2, r2, #24
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	e00c      	b.n	8000f8e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6899      	ldr	r1, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f834 	bl	8000fec <HAL_CRCEx_Polynomial_Set>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e028      	b.n	8000fe0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	795b      	ldrb	r3, [r3, #5]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d105      	bne.n	8000fa2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	e004      	b.n	8000fac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6912      	ldr	r2, [r2, #16]
 8000faa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699a      	ldr	r2, [r3, #24]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	04c11db7 	.word	0x04c11db7

08000fec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000ffc:	231f      	movs	r3, #31
 8000ffe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
 800100e:	e063      	b.n	80010d8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001010:	bf00      	nop
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	613a      	str	r2, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d009      	beq.n	8001030 <HAL_CRCEx_Polynomial_Set+0x44>
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b18      	cmp	r3, #24
 8001034:	d846      	bhi.n	80010c4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001036:	a201      	add	r2, pc, #4	@ (adr r2, 800103c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	080010cb 	.word	0x080010cb
 8001040:	080010c5 	.word	0x080010c5
 8001044:	080010c5 	.word	0x080010c5
 8001048:	080010c5 	.word	0x080010c5
 800104c:	080010c5 	.word	0x080010c5
 8001050:	080010c5 	.word	0x080010c5
 8001054:	080010c5 	.word	0x080010c5
 8001058:	080010c5 	.word	0x080010c5
 800105c:	080010b9 	.word	0x080010b9
 8001060:	080010c5 	.word	0x080010c5
 8001064:	080010c5 	.word	0x080010c5
 8001068:	080010c5 	.word	0x080010c5
 800106c:	080010c5 	.word	0x080010c5
 8001070:	080010c5 	.word	0x080010c5
 8001074:	080010c5 	.word	0x080010c5
 8001078:	080010c5 	.word	0x080010c5
 800107c:	080010ad 	.word	0x080010ad
 8001080:	080010c5 	.word	0x080010c5
 8001084:	080010c5 	.word	0x080010c5
 8001088:	080010c5 	.word	0x080010c5
 800108c:	080010c5 	.word	0x080010c5
 8001090:	080010c5 	.word	0x080010c5
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010c5 	.word	0x080010c5
 800109c:	080010a1 	.word	0x080010a1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d913      	bls.n	80010ce <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010aa:	e010      	b.n	80010ce <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	d90f      	bls.n	80010d2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010b6:	e00c      	b.n	80010d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	d90b      	bls.n	80010d6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010c2:	e008      	b.n	80010d6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	75fb      	strb	r3, [r7, #23]
        break;
 80010c8:	e006      	b.n	80010d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ca:	bf00      	nop
 80010cc:	e004      	b.n	80010d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ce:	bf00      	nop
 80010d0:	e002      	b.n	80010d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010d2:	bf00      	nop
 80010d4:	e000      	b.n	80010d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010d6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 0118 	bic.w	r1, r3, #24
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e147      	b.n	80013aa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d106      	bne.n	8001134 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fb3e 	bl	80007b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0210 	bic.w	r2, r2, #16
 8001142:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001144:	f7ff fd2e 	bl	8000ba4 <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800114a:	e012      	b.n	8001172 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800114c:	f7ff fd2a 	bl	8000ba4 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b0a      	cmp	r3, #10
 8001158:	d90b      	bls.n	8001172 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e11b      	b.n	80013aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b08      	cmp	r3, #8
 800117e:	d0e5      	beq.n	800114c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff fd08 	bl	8000ba4 <HAL_GetTick>
 8001194:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001196:	e012      	b.n	80011be <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001198:	f7ff fd04 	bl	8000ba4 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b0a      	cmp	r3, #10
 80011a4:	d90b      	bls.n	80011be <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2203      	movs	r2, #3
 80011b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e0f5      	b.n	80013aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0e5      	beq.n	8001198 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0202 	orr.w	r2, r2, #2
 80011da:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a74      	ldr	r2, [pc, #464]	@ (80013b4 <HAL_FDCAN_Init+0x2ac>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d103      	bne.n	80011ee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011e6:	4a74      	ldr	r2, [pc, #464]	@ (80013b8 <HAL_FDCAN_Init+0x2b0>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7c1b      	ldrb	r3, [r3, #16]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d108      	bne.n	8001208 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001204:	619a      	str	r2, [r3, #24]
 8001206:	e007      	b.n	8001218 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001216:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7c5b      	ldrb	r3, [r3, #17]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d108      	bne.n	8001232 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800122e:	619a      	str	r2, [r3, #24]
 8001230:	e007      	b.n	8001242 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699a      	ldr	r2, [r3, #24]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001240:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7c9b      	ldrb	r3, [r3, #18]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d108      	bne.n	800125c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	e007      	b.n	800126c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800126a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001290:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0210 	bic.w	r2, r2, #16
 80012a0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d108      	bne.n	80012bc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0204 	orr.w	r2, r2, #4
 80012b8:	619a      	str	r2, [r3, #24]
 80012ba:	e02c      	b.n	8001316 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d028      	beq.n	8001316 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d01c      	beq.n	8001306 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012da:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0210 	orr.w	r2, r2, #16
 80012ea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d110      	bne.n	8001316 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	619a      	str	r2, [r3, #24]
 8001304:	e007      	b.n	8001316 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0220 	orr.w	r2, r2, #32
 8001314:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	3b01      	subs	r3, #1
 800131c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	3b01      	subs	r3, #1
 8001324:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001326:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800132e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	3b01      	subs	r3, #1
 8001338:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800133e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001340:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800134a:	d115      	bne.n	8001378 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001356:	3b01      	subs	r3, #1
 8001358:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800135a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	3b01      	subs	r3, #1
 8001362:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001364:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136c:	3b01      	subs	r3, #1
 800136e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001374:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001376:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fbfc 	bl	8001b8c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	4000a400 	.word	0x4000a400
 80013b8:	4000a500 	.word	0x4000a500

080013bc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d110      	bne.n	80013f2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e006      	b.n	8001400 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	f043 0204 	orr.w	r2, r3, #4
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
  }
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d12c      	bne.n	800147e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800142c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001438:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e023      	b.n	800148c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800144c:	0c1b      	lsrs	r3, r3, #16
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 fbec 	bl	8001c38 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001470:	2201      	movs	r2, #1
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	409a      	lsls	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e006      	b.n	800148c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	f043 0208 	orr.w	r2, r3, #8
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
  }
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001494:	b480      	push	{r7}
 8001496:	b08b      	sub	sp, #44	@ 0x2c
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014ac:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80014ae:	7efb      	ldrb	r3, [r7, #27]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	f040 80e8 	bne.w	8001686 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b40      	cmp	r3, #64	@ 0x40
 80014ba:	d137      	bne.n	800152c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0db      	b.n	8001694 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e4:	0e1b      	lsrs	r3, r3, #24
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10a      	bne.n	8001504 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014f6:	0a5b      	lsrs	r3, r3, #9
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	4413      	add	r3, r2
 8001516:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
 800152a:	e036      	b.n	800159a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	2b00      	cmp	r3, #0
 800153a:	d107      	bne.n	800154c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001540:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0a3      	b.n	8001694 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001554:	0e1b      	lsrs	r3, r3, #24
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10a      	bne.n	8001574 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	4413      	add	r3, r2
 8001586:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d107      	bne.n	80015be <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e005      	b.n	80015ca <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	3304      	adds	r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	f003 020f 	and.w	r2, r3, #15
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0e1b      	lsrs	r3, r3, #24
 800161e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0fda      	lsrs	r2, r3, #31
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	3304      	adds	r3, #4
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	e00a      	b.n	8001656 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	441a      	add	r2, r3
 8001646:	6839      	ldr	r1, [r7, #0]
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	440b      	add	r3, r1
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	3301      	adds	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800165c:	5cd3      	ldrb	r3, [r2, r3]
 800165e:	461a      	mov	r2, r3
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	4293      	cmp	r3, r2
 8001664:	d3ec      	bcc.n	8001640 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b40      	cmp	r3, #64	@ 0x40
 800166a:	d105      	bne.n	8001678 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001676:	e004      	b.n	8001682 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e006      	b.n	8001694 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	f043 0208 	orr.w	r2, r3, #8
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	372c      	adds	r7, #44	@ 0x2c
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	08003cd4 	.word	0x08003cd4

080016a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016b6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d003      	beq.n	80016c6 <HAL_FDCAN_ActivateNotification+0x22>
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	f040 80c8 	bne.w	8001856 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03b      	beq.n	800175a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d031      	beq.n	800175a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d027      	beq.n	800175a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01d      	beq.n	800175a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d013      	beq.n	800175a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0201 	orr.w	r2, r2, #1
 8001768:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d13b      	bne.n	80017f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d131      	bne.n	80017f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d127      	bne.n	80017f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d11d      	bne.n	80017f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d113      	bne.n	80017f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00c      	beq.n	8001806 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0202 	orr.w	r2, r2, #2
 8001804:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	430a      	orrs	r2, r1
 8001820:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	430a      	orrs	r2, r1
 800183e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	430a      	orrs	r2, r1
 8001850:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e006      	b.n	8001864 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
  }
}
 8001864:	4618      	mov	r0, r3
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800187e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800188c:	4013      	ands	r3, r2
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a4:	4013      	ands	r3, r2
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018bc:	4013      	ands	r3, r2
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018c6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80018ca:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d2:	6a3a      	ldr	r2, [r7, #32]
 80018d4:	4013      	ands	r3, r2
 80018d6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018e2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018fe:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2240      	movs	r2, #64	@ 0x40
 800191a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f916 	bl	8001b4e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d019      	beq.n	8001960 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d014      	beq.n	8001960 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800193e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001956:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001958:	6939      	ldr	r1, [r7, #16]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f8d8 	bl	8001b10 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800196c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800196e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f8a2 	bl	8001aba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001982:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7fe fc86 	bl	8000298 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001998:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800199a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f897 	bl	8001ad0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f890 	bl	8001ae6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d018      	beq.n	8001a02 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d013      	beq.n	8001a02 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019e2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80019fa:	68f9      	ldr	r1, [r7, #12]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f87c 	bl	8001afa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f880 	bl	8001b26 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f878 	bl	8001b3a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00f      	beq.n	8001a74 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a82:	69f9      	ldr	r1, [r7, #28]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f876 	bl	8001b76 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f858 	bl	8001b62 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3730      	adds	r7, #48	@ 0x30
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001b94:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001b96:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bae:	041a      	lsls	r2, r3, #16
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bcc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd4:	061a      	lsls	r2, r3, #24
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e005      	b.n	8001c1a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3304      	adds	r3, #4
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d3f3      	bcc.n	8001c0e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	4000ac00 	.word	0x4000ac00

08001c38 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	@ 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001c56:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e00a      	b.n	8001c7a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001c6c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001c72:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c78:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c84:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001c8a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001c90:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e020      	b.n	8001d0e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3303      	adds	r3, #3
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	440b      	add	r3, r1
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ce4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	440b      	add	r3, r1
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001cf2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	440a      	add	r2, r1
 8001cfa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001cfc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	3304      	adds	r3, #4
 8001d06:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4a06      	ldr	r2, [pc, #24]	@ (8001d2c <FDCAN_CopyMessageToRAM+0xf4>)
 8001d14:	5cd3      	ldrb	r3, [r2, r3]
 8001d16:	461a      	mov	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d3d6      	bcc.n	8001ccc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3724      	adds	r7, #36	@ 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	08003cd4 	.word	0x08003cd4

08001d30 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d3e:	e136      	b.n	8001fae <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8128 	beq.w	8001fa8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x38>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d125      	bne.n	8001db4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	6979      	ldr	r1, [r7, #20]
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d00b      	beq.n	8001e08 <HAL_GPIO_Init+0xd8>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d007      	beq.n	8001e08 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dfc:	2b11      	cmp	r3, #17
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b12      	cmp	r3, #18
 8001e06:	d130      	bne.n	8001e6a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 0201 	and.w	r2, r3, #1
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d017      	beq.n	8001ea2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4013      	ands	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d07c      	beq.n	8001fa8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001eae:	4a47      	ldr	r2, [pc, #284]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3318      	adds	r3, #24
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	0a9a      	lsrs	r2, r3, #10
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <HAL_GPIO_Init+0x2a0>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	00d2      	lsls	r2, r2, #3
 8001ee2:	4093      	lsls	r3, r2
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001eea:	4938      	ldr	r1, [pc, #224]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3318      	adds	r3, #24
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ef8:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001f46:	4a21      	ldr	r2, [pc, #132]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f52:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001f72:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f80:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_GPIO_Init+0x29c>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	3301      	adds	r3, #1
 8001fac:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f aec1 	bne.w	8001d40 <HAL_GPIO_Init+0x10>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	44022000 	.word	0x44022000
 8001fd0:	002f7f7f 	.word	0x002f7f7f

08001fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e001      	b.n	8001ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e007      	b.n	8002032 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0204 	bic.w	r2, r3, #4
 800202a:	4905      	ldr	r1, [pc, #20]	@ (8002040 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40030400 	.word	0x40030400

08002044 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_ICACHE_Enable+0x1c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <HAL_ICACHE_Enable+0x1c>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40030400 	.word	0x40030400

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f000 bc28 	b.w	80028c8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002078:	4b94      	ldr	r3, [pc, #592]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f003 0318 	and.w	r3, r3, #24
 8002080:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002082:	4b92      	ldr	r3, [pc, #584]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	d05b      	beq.n	8002150 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b08      	cmp	r3, #8
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x46>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	2b18      	cmp	r3, #24
 80020a2:	d114      	bne.n	80020ce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d111      	bne.n	80020ce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f000 bc08 	b.w	80028c8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80020b8:	4b84      	ldr	r3, [pc, #528]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	4981      	ldr	r1, [pc, #516]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80020cc:	e040      	b.n	8002150 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d023      	beq.n	800211e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020d6:	4b7d      	ldr	r3, [pc, #500]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7c      	ldr	r2, [pc, #496]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe fd5f 	bl	8000ba4 <HAL_GetTick>
 80020e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80020ea:	f7fe fd5b 	bl	8000ba4 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e3e5      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020fc:	4b73      	ldr	r3, [pc, #460]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002108:	4b70      	ldr	r3, [pc, #448]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	496d      	ldr	r1, [pc, #436]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002118:	4313      	orrs	r3, r2
 800211a:	618b      	str	r3, [r1, #24]
 800211c:	e018      	b.n	8002150 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800211e:	4b6b      	ldr	r3, [pc, #428]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6a      	ldr	r2, [pc, #424]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7fe fd3b 	bl	8000ba4 <HAL_GetTick>
 800212e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002132:	f7fe fd37 	bl	8000ba4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e3c1      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002144:	4b61      	ldr	r3, [pc, #388]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a0 	beq.w	800229e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	2b10      	cmp	r3, #16
 8002162:	d005      	beq.n	8002170 <HAL_RCC_OscConfig+0x10c>
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b18      	cmp	r3, #24
 8002168:	d109      	bne.n	800217e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 8092 	bne.w	800229e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e3a4      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x132>
 8002188:	4b50      	ldr	r3, [pc, #320]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4f      	ldr	r2, [pc, #316]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e058      	b.n	8002248 <HAL_RCC_OscConfig+0x1e4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d112      	bne.n	80021c4 <HAL_RCC_OscConfig+0x160>
 800219e:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4a      	ldr	r2, [pc, #296]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b48      	ldr	r3, [pc, #288]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a47      	ldr	r2, [pc, #284]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b45      	ldr	r3, [pc, #276]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a44      	ldr	r2, [pc, #272]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e041      	b.n	8002248 <HAL_RCC_OscConfig+0x1e4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d112      	bne.n	80021f4 <HAL_RCC_OscConfig+0x190>
 80021ce:	4b3f      	ldr	r3, [pc, #252]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a3e      	ldr	r2, [pc, #248]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b3c      	ldr	r3, [pc, #240]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3b      	ldr	r2, [pc, #236]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b39      	ldr	r3, [pc, #228]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a38      	ldr	r2, [pc, #224]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e029      	b.n	8002248 <HAL_RCC_OscConfig+0x1e4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80021fc:	d112      	bne.n	8002224 <HAL_RCC_OscConfig+0x1c0>
 80021fe:	4b33      	ldr	r3, [pc, #204]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a32      	ldr	r2, [pc, #200]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b30      	ldr	r3, [pc, #192]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a2f      	ldr	r2, [pc, #188]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002210:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b2d      	ldr	r3, [pc, #180]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a2c      	ldr	r2, [pc, #176]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e011      	b.n	8002248 <HAL_RCC_OscConfig+0x1e4>
 8002224:	4b29      	ldr	r3, [pc, #164]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a28      	ldr	r2, [pc, #160]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800222a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b26      	ldr	r3, [pc, #152]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a25      	ldr	r2, [pc, #148]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b23      	ldr	r3, [pc, #140]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a22      	ldr	r2, [pc, #136]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002242:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fca8 	bl	8000ba4 <HAL_GetTick>
 8002254:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002258:	f7fe fca4 	bl	8000ba4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	@ 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e32e      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x1f4>
 8002276:	e012      	b.n	800229e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fc94 	bl	8000ba4 <HAL_GetTick>
 800227c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002280:	f7fe fc90 	bl	8000ba4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e31a      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_RCC_OscConfig+0x268>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 809a 	beq.w	80023e0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x25a>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2b18      	cmp	r3, #24
 80022b6:	d149      	bne.n	800234c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d146      	bne.n	800234c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e2fe      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
 80022ca:	bf00      	nop
 80022cc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80022d6:	4b9a      	ldr	r3, [pc, #616]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0218 	and.w	r2, r3, #24
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d014      	beq.n	8002310 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80022e6:	4b96      	ldr	r3, [pc, #600]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0218 	bic.w	r2, r3, #24
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	4993      	ldr	r1, [pc, #588]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80022f8:	f000 fdd0 	bl	8002e9c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022fc:	4b91      	ldr	r3, [pc, #580]	@ (8002544 <HAL_RCC_OscConfig+0x4e0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fbc5 	bl	8000a90 <HAL_InitTick>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e2db      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fc48 	bl	8000ba4 <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002318:	f7fe fc44 	bl	8000ba4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e2ce      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800232a:	4b85      	ldr	r3, [pc, #532]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002336:	4b82      	ldr	r3, [pc, #520]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	497e      	ldr	r1, [pc, #504]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800234a:	e049      	b.n	80023e0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d02c      	beq.n	80023ae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002354:	4b7a      	ldr	r3, [pc, #488]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 0218 	bic.w	r2, r3, #24
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4977      	ldr	r1, [pc, #476]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002366:	4b76      	ldr	r3, [pc, #472]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a75      	ldr	r2, [pc, #468]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe fc17 	bl	8000ba4 <HAL_GetTick>
 8002376:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800237a:	f7fe fc13 	bl	8000ba4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e29d      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800238c:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002398:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	4966      	ldr	r1, [pc, #408]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	610b      	str	r3, [r1, #16]
 80023ac:	e018      	b.n	80023e0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b64      	ldr	r3, [pc, #400]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a63      	ldr	r2, [pc, #396]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe fbf3 	bl	8000ba4 <HAL_GetTick>
 80023be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023c2:	f7fe fbef 	bl	8000ba4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e279      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d03c      	beq.n	8002466 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01c      	beq.n	800242e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f4:	4b52      	ldr	r3, [pc, #328]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80023f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023fa:	4a51      	ldr	r2, [pc, #324]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80023fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002400:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7fe fbce 	bl	8000ba4 <HAL_GetTick>
 8002408:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800240c:	f7fe fbca 	bl	8000ba4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e254      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800241e:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ef      	beq.n	800240c <HAL_RCC_OscConfig+0x3a8>
 800242c:	e01b      	b.n	8002466 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242e:	4b44      	ldr	r3, [pc, #272]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002434:	4a42      	ldr	r2, [pc, #264]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002436:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800243a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe fbb1 	bl	8000ba4 <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002446:	f7fe fbad 	bl	8000ba4 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e237      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002458:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 800245a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800245e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ef      	bne.n	8002446 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80d2 	beq.w	8002618 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002474:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <HAL_RCC_OscConfig+0x4e4>)
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d118      	bne.n	80024b2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002480:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <HAL_RCC_OscConfig+0x4e4>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	4a30      	ldr	r2, [pc, #192]	@ (8002548 <HAL_RCC_OscConfig+0x4e4>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248c:	f7fe fb8a 	bl	8000ba4 <HAL_GetTick>
 8002490:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7fe fb86 	bl	8000ba4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e210      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80024a6:	4b28      	ldr	r3, [pc, #160]	@ (8002548 <HAL_RCC_OscConfig+0x4e4>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <HAL_RCC_OscConfig+0x468>
 80024ba:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ca:	e074      	b.n	80025b6 <HAL_RCC_OscConfig+0x552>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d118      	bne.n	8002506 <HAL_RCC_OscConfig+0x4a2>
 80024d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024da:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024e4:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ea:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024f4:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024fa:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002504:	e057      	b.n	80025b6 <HAL_RCC_OscConfig+0x552>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d11e      	bne.n	800254c <HAL_RCC_OscConfig+0x4e8>
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800251e:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002524:	4a06      	ldr	r2, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800252a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800252e:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002534:	4a02      	ldr	r2, [pc, #8]	@ (8002540 <HAL_RCC_OscConfig+0x4dc>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800253e:	e03a      	b.n	80025b6 <HAL_RCC_OscConfig+0x552>
 8002540:	44020c00 	.word	0x44020c00
 8002544:	20000004 	.word	0x20000004
 8002548:	44020800 	.word	0x44020800
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b85      	cmp	r3, #133	@ 0x85
 8002552:	d118      	bne.n	8002586 <HAL_RCC_OscConfig+0x522>
 8002554:	4ba2      	ldr	r3, [pc, #648]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800255a:	4aa1      	ldr	r2, [pc, #644]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002564:	4b9e      	ldr	r3, [pc, #632]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800256a:	4a9d      	ldr	r2, [pc, #628]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800256c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002574:	4b9a      	ldr	r3, [pc, #616]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800257a:	4a99      	ldr	r2, [pc, #612]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002584:	e017      	b.n	80025b6 <HAL_RCC_OscConfig+0x552>
 8002586:	4b96      	ldr	r3, [pc, #600]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800258c:	4a94      	ldr	r2, [pc, #592]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002596:	4b92      	ldr	r3, [pc, #584]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800259c:	4a90      	ldr	r2, [pc, #576]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800259e:	f023 0304 	bic.w	r3, r3, #4
 80025a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025a6:	4b8e      	ldr	r3, [pc, #568]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80025a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ac:	4a8c      	ldr	r2, [pc, #560]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80025ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d016      	beq.n	80025ec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe faf1 	bl	8000ba4 <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe faed 	bl	8000ba4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e175      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025dc:	4b80      	ldr	r3, [pc, #512]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80025de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0ed      	beq.n	80025c6 <HAL_RCC_OscConfig+0x562>
 80025ea:	e015      	b.n	8002618 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fada 	bl	8000ba4 <HAL_GetTick>
 80025f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe fad6 	bl	8000ba4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e15e      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800260a:	4b75      	ldr	r3, [pc, #468]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800260c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ed      	bne.n	80025f4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d036      	beq.n	8002692 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	d019      	beq.n	8002660 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800262c:	4b6c      	ldr	r3, [pc, #432]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6b      	ldr	r2, [pc, #428]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002632:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fab4 	bl	8000ba4 <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002640:	f7fe fab0 	bl	8000ba4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e13a      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002652:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x5dc>
 800265e:	e018      	b.n	8002692 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002660:	4b5f      	ldr	r3, [pc, #380]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5e      	ldr	r2, [pc, #376]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800266a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fe fa9a 	bl	8000ba4 <HAL_GetTick>
 8002670:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002674:	f7fe fa96 	bl	8000ba4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e120      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002686:	4b56      	ldr	r3, [pc, #344]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8115 	beq.w	80028c6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b18      	cmp	r3, #24
 80026a0:	f000 80af 	beq.w	8002802 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	f040 8086 	bne.w	80027ba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80026ae:	4b4c      	ldr	r3, [pc, #304]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a4b      	ldr	r2, [pc, #300]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80026b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fa73 	bl	8000ba4 <HAL_GetTick>
 80026be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80026c2:	f7fe fa6f 	bl	8000ba4 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0f9      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026d4:	4b42      	ldr	r3, [pc, #264]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80026e0:	4b3f      	ldr	r3, [pc, #252]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026e8:	f023 0303 	bic.w	r3, r3, #3
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026f4:	0212      	lsls	r2, r2, #8
 80026f6:	430a      	orrs	r2, r1
 80026f8:	4939      	ldr	r1, [pc, #228]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002702:	3b01      	subs	r3, #1
 8002704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270c:	3b01      	subs	r3, #1
 800270e:	025b      	lsls	r3, r3, #9
 8002710:	b29b      	uxth	r3, r3
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002718:	3b01      	subs	r3, #1
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	3b01      	subs	r3, #1
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800272e:	492c      	ldr	r1, [pc, #176]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002734:	4b2a      	ldr	r3, [pc, #168]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	4a29      	ldr	r2, [pc, #164]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800273a:	f023 0310 	bic.w	r3, r3, #16
 800273e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002744:	4a26      	ldr	r2, [pc, #152]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800274a:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	4a24      	ldr	r2, [pc, #144]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002756:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	f023 020c 	bic.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	491f      	ldr	r1, [pc, #124]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002768:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	f023 0220 	bic.w	r2, r3, #32
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002774:	491a      	ldr	r1, [pc, #104]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002776:	4313      	orrs	r3, r2
 8002778:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800277a:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	4a18      	ldr	r2, [pc, #96]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002786:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a15      	ldr	r2, [pc, #84]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 800278c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fa07 	bl	8000ba4 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800279a:	f7fe fa03 	bl	8000ba4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e08d      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x736>
 80027b8:	e085      	b.n	80028c6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80027ba:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a08      	ldr	r2, [pc, #32]	@ (80027e0 <HAL_RCC_OscConfig+0x77c>)
 80027c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe f9ed 	bl	8000ba4 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80027ce:	f7fe f9e9 	bl	8000ba4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d903      	bls.n	80027e4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e073      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
 80027e0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027e4:	4b3a      	ldr	r3, [pc, #232]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ee      	bne.n	80027ce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80027f0:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	4a36      	ldr	r2, [pc, #216]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 80027f6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80027fa:	f023 0303 	bic.w	r3, r3, #3
 80027fe:	6293      	str	r3, [r2, #40]	@ 0x28
 8002800:	e061      	b.n	80028c6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002802:	4b33      	ldr	r3, [pc, #204]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 8002804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002806:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002808:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 800280a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	2b01      	cmp	r3, #1
 8002814:	d031      	beq.n	800287a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0203 	and.w	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d12a      	bne.n	800287a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d122      	bne.n	800287a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d11a      	bne.n	800287a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	0a5b      	lsrs	r3, r3, #9
 8002848:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002850:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d111      	bne.n	800287a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002862:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d108      	bne.n	800287a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	0e1b      	lsrs	r3, r3, #24
 800286c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e024      	b.n	80028c8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	08db      	lsrs	r3, r3, #3
 8002884:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800288c:	429a      	cmp	r2, r3
 800288e:	d01a      	beq.n	80028c6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002890:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	4a0e      	ldr	r2, [pc, #56]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 8002896:	f023 0310 	bic.w	r3, r3, #16
 800289a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe f982 	bl	8000ba4 <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80028a2:	bf00      	nop
 80028a4:	f7fe f97e 	bl	8000ba4 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d0f9      	beq.n	80028a4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b4:	4a06      	ldr	r2, [pc, #24]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <HAL_RCC_OscConfig+0x86c>)
 80028c0:	f043 0310 	orr.w	r3, r3, #16
 80028c4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	44020c00 	.word	0x44020c00

080028d4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e19e      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b83      	ldr	r3, [pc, #524]	@ (8002af8 <HAL_RCC_ClockConfig+0x224>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b80      	ldr	r3, [pc, #512]	@ (8002af8 <HAL_RCC_ClockConfig+0x224>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 020f 	bic.w	r2, r3, #15
 80028fe:	497e      	ldr	r1, [pc, #504]	@ (8002af8 <HAL_RCC_ClockConfig+0x224>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b7c      	ldr	r3, [pc, #496]	@ (8002af8 <HAL_RCC_ClockConfig+0x224>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e186      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	4b74      	ldr	r3, [pc, #464]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002932:	429a      	cmp	r2, r3
 8002934:	d909      	bls.n	800294a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002936:	4b71      	ldr	r3, [pc, #452]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	496d      	ldr	r1, [pc, #436]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002946:	4313      	orrs	r3, r2
 8002948:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d012      	beq.n	800297c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	4b68      	ldr	r3, [pc, #416]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002964:	429a      	cmp	r2, r3
 8002966:	d909      	bls.n	800297c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002968:	4b64      	ldr	r3, [pc, #400]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4961      	ldr	r1, [pc, #388]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002978:	4313      	orrs	r3, r2
 800297a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d010      	beq.n	80029aa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	4b5b      	ldr	r3, [pc, #364]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002994:	429a      	cmp	r2, r3
 8002996:	d908      	bls.n	80029aa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002998:	4b58      	ldr	r3, [pc, #352]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4955      	ldr	r1, [pc, #340]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	4b50      	ldr	r3, [pc, #320]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d908      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80029c6:	4b4d      	ldr	r3, [pc, #308]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 020f 	bic.w	r2, r3, #15
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	494a      	ldr	r1, [pc, #296]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8093 	beq.w	8002b0c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029ee:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d121      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e113      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a06:	4b3d      	ldr	r3, [pc, #244]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d115      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e107      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a1e:	4b37      	ldr	r3, [pc, #220]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0fb      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2e:	4b33      	ldr	r3, [pc, #204]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0f3      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	492c      	ldr	r1, [pc, #176]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe f8a8 	bl	8000ba4 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a60:	f7fe f8a0 	bl	8000ba4 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0d7      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a76:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 0318 	and.w	r3, r3, #24
 8002a7e:	2b18      	cmp	r3, #24
 8002a80:	d1ee      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x18c>
 8002a82:	e043      	b.n	8002b0c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d112      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8e:	f7fe f889 	bl	8000ba4 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0c0      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa4:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f003 0318 	and.w	r3, r3, #24
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x1ba>
 8002ab0:	e02c      	b.n	8002b0c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d122      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe f872 	bl	8000ba4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0a9      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <HAL_RCC_ClockConfig+0x228>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 0318 	and.w	r3, r3, #24
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCC_ClockConfig+0x1e8>
 8002ade:	e015      	b.n	8002b0c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7fe f860 	bl	8000ba4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d906      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e097      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
 8002af6:	bf00      	nop
 8002af8:	40022000 	.word	0x40022000
 8002afc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b00:	4b4b      	ldr	r3, [pc, #300]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 0318 	and.w	r3, r3, #24
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e9      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d208      	bcs.n	8002b3a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002b28:	4b41      	ldr	r3, [pc, #260]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f023 020f 	bic.w	r2, r3, #15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	493e      	ldr	r1, [pc, #248]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c34 <HAL_RCC_ClockConfig+0x360>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d210      	bcs.n	8002b6a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b48:	4b3a      	ldr	r3, [pc, #232]	@ (8002c34 <HAL_RCC_ClockConfig+0x360>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 020f 	bic.w	r2, r3, #15
 8002b50:	4938      	ldr	r1, [pc, #224]	@ (8002c34 <HAL_RCC_ClockConfig+0x360>)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b58:	4b36      	ldr	r3, [pc, #216]	@ (8002c34 <HAL_RCC_ClockConfig+0x360>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e05d      	b.n	8002c26 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d010      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d208      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b86:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4927      	ldr	r1, [pc, #156]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d209      	bcs.n	8002bca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	491a      	ldr	r1, [pc, #104]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d209      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002be8:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	490e      	ldr	r1, [pc, #56]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bfc:	f000 f822 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <HAL_RCC_ClockConfig+0x35c>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	490b      	ldr	r1, [pc, #44]	@ (8002c38 <HAL_RCC_ClockConfig+0x364>)
 8002c0c:	5ccb      	ldrb	r3, [r1, r3]
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <HAL_RCC_ClockConfig+0x368>)
 8002c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_RCC_ClockConfig+0x36c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd ff38 	bl	8000a90 <HAL_InitTick>
 8002c20:	4603      	mov	r3, r0
 8002c22:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002c24:	7afb      	ldrb	r3, [r7, #11]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	44020c00 	.word	0x44020c00
 8002c34:	40022000 	.word	0x40022000
 8002c38:	08003cc4 	.word	0x08003cc4
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c4a:	4b8c      	ldr	r3, [pc, #560]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 0318 	and.w	r3, r3, #24
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c56:	4b8a      	ldr	r3, [pc, #552]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e107      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c5c:	4b87      	ldr	r3, [pc, #540]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 0318 	and.w	r3, r3, #24
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d112      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c68:	4b84      	ldr	r3, [pc, #528]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c74:	4b81      	ldr	r3, [pc, #516]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	4a81      	ldr	r2, [pc, #516]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	e0f1      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002c88:	4b7e      	ldr	r3, [pc, #504]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	e0ee      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 0318 	and.w	r3, r3, #24
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x244>)
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e0e5      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca0:	4b76      	ldr	r3, [pc, #472]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f003 0318 	and.w	r3, r3, #24
 8002ca8:	2b18      	cmp	r3, #24
 8002caa:	f040 80dd 	bne.w	8002e68 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002cae:	4b73      	ldr	r3, [pc, #460]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002cb8:	4b70      	ldr	r3, [pc, #448]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80b7 	beq.w	8002e62 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0xbe>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d056      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x16a>
 8002d00:	e077      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002d02:	4b5e      	ldr	r3, [pc, #376]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02d      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	08db      	lsrs	r3, r3, #3
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	4a5a      	ldr	r2, [pc, #360]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d38:	4b50      	ldr	r3, [pc, #320]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d48:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d4c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002e8c <HAL_RCC_GetSysClockFreq+0x248>
 8002d50:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d64:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002d68:	e065      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d74:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e90 <HAL_RCC_GetSysClockFreq+0x24c>
 8002d78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d90:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002e8c <HAL_RCC_GetSysClockFreq+0x248>
 8002d94:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002da0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002dac:	e043      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002e94 <HAL_RCC_GetSysClockFreq+0x250>
 8002dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dd4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002e8c <HAL_RCC_GetSysClockFreq+0x248>
 8002dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002df0:	e021      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002e98 <HAL_RCC_GetSysClockFreq+0x254>
 8002e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e04:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e14:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e18:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002e8c <HAL_RCC_GetSysClockFreq+0x248>
 8002e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e30:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002e34:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3a:	0a5b      	lsrs	r3, r3, #9
 8002e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e40:	3301      	adds	r3, #1
 8002e42:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e4e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5a:	ee17 3a90 	vmov	r3, s15
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	e004      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	e001      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e6a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	@ 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	44020c00 	.word	0x44020c00
 8002e80:	003d0900 	.word	0x003d0900
 8002e84:	03d09000 	.word	0x03d09000
 8002e88:	017d7840 	.word	0x017d7840
 8002e8c:	46000000 	.word	0x46000000
 8002e90:	4c742400 	.word	0x4c742400
 8002e94:	4bbebc20 	.word	0x4bbebc20
 8002e98:	4a742400 	.word	0x4a742400

08002e9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ea0:	f7ff fed0 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002eaa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002eae:	4907      	ldr	r1, [pc, #28]	@ (8002ecc <HAL_RCC_GetHCLKFreq+0x30>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002eb2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eba:	4a05      	ldr	r2, [pc, #20]	@ (8002ed0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ebc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002ebe:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	44020c00 	.word	0x44020c00
 8002ecc:	08003cc4 	.word	0x08003cc4
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed8:	b0aa      	sub	sp, #168	@ 0xa8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002ef8:	2500      	movs	r5, #0
 8002efa:	ea54 0305 	orrs.w	r3, r4, r5
 8002efe:	d00b      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002f00:	4bb8      	ldr	r3, [pc, #736]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f06:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002f0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	4ab4      	ldr	r2, [pc, #720]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f12:	430b      	orrs	r3, r1
 8002f14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f002 0801 	and.w	r8, r2, #1
 8002f24:	f04f 0900 	mov.w	r9, #0
 8002f28:	ea58 0309 	orrs.w	r3, r8, r9
 8002f2c:	d038      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002f2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d819      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f38:	a201      	add	r2, pc, #4	@ (adr r2, 8002f40 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08002f59 	.word	0x08002f59
 8002f48:	08002f6d 	.word	0x08002f6d
 8002f4c:	08002f75 	.word	0x08002f75
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f75 	.word	0x08002f75
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fddc 	bl	8003b1c <RCCEx_PLL2_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002f6a:	e004      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f76:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002f7e:	4b99      	ldr	r3, [pc, #612]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f84:	f023 0107 	bic.w	r1, r3, #7
 8002f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8e:	4a95      	ldr	r2, [pc, #596]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f96:	e003      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f9c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f002 0a02 	and.w	sl, r2, #2
 8002fac:	f04f 0b00 	mov.w	fp, #0
 8002fb0:	ea5a 030b 	orrs.w	r3, sl, fp
 8002fb4:	d03c      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbc:	2b28      	cmp	r3, #40	@ 0x28
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002fc0:	2b28      	cmp	r3, #40	@ 0x28
 8002fc2:	d815      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d019      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d811      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002fcc:	2b18      	cmp	r3, #24
 8002fce:	d017      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002fd0:	2b18      	cmp	r3, #24
 8002fd2:	d80d      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d109      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fd9a 	bl	8003b1c <RCCEx_PLL2_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002fee:	e00a      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002ff6:	e006      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002ff8:	bf00      	nop
 8002ffa:	e004      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002ffc:	bf00      	nop
 8002ffe:	e002      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003006:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800300e:	4b75      	ldr	r3, [pc, #468]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003014:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003018:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	4a71      	ldr	r2, [pc, #452]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003020:	430b      	orrs	r3, r1
 8003022:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003028:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800302c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003030:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f002 0304 	and.w	r3, r2, #4
 800303c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003046:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800304a:	460b      	mov	r3, r1
 800304c:	4313      	orrs	r3, r2
 800304e:	d040      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003050:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800305a:	d01e      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800305c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003060:	d817      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003066:	d01a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800306c:	d811      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800306e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003070:	d017      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003072:	2bc0      	cmp	r3, #192	@ 0xc0
 8003074:	d80d      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800307a:	2b40      	cmp	r3, #64	@ 0x40
 800307c:	d109      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800307e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003082:	3308      	adds	r3, #8
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fd49 	bl	8003b1c <RCCEx_PLL2_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003090:	e00a      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003098:	e006      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800309a:	bf00      	nop
 800309c:	e004      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800309e:	bf00      	nop
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80030a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10c      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80030b0:	4b4c      	ldr	r3, [pc, #304]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030b6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80030ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c0:	4a48      	ldr	r2, [pc, #288]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030c2:	430b      	orrs	r3, r1
 80030c4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030c8:	e003      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80030ce:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80030de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030e8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80030ec:	460b      	mov	r3, r1
 80030ee:	4313      	orrs	r3, r2
 80030f0:	d043      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80030f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80030fc:	d021      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80030fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003102:	d81a      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003104:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003108:	d01d      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800310a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800310e:	d814      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003110:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003114:	d019      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003116:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800311a:	d80e      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003124:	d109      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003126:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800312a:	3308      	adds	r3, #8
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fcf5 	bl	8003b1c <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003138:	e00a      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003140:	e006      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800314e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003150:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10c      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003158:	4b22      	ldr	r3, [pc, #136]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800315a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800315e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003162:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	4a1e      	ldr	r2, [pc, #120]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800316a:	430b      	orrs	r3, r1
 800316c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003170:	e003      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003172:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003176:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800317a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003186:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003188:	2300      	movs	r3, #0
 800318a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800318c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003190:	460b      	mov	r3, r1
 8003192:	4313      	orrs	r3, r2
 8003194:	d03e      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800319a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031a0:	d01b      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x306>
 80031a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031a6:	d814      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80031a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031ac:	d017      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80031ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031b2:	d80e      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d017      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031bc:	d109      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031c2:	3308      	adds	r3, #8
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fca9 	bl	8003b1c <RCCEx_PLL2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80031d0:	e00b      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80031d8:	e007      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80031da:	bf00      	nop
 80031dc:	e005      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80031de:	bf00      	nop
 80031e0:	e003      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x316>
 80031e2:	bf00      	nop
 80031e4:	44020c00 	.word	0x44020c00
        break;
 80031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80031f2:	4ba5      	ldr	r3, [pc, #660]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80031f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031f8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80031fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	4aa1      	ldr	r2, [pc, #644]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003204:	430b      	orrs	r3, r1
 8003206:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800320a:	e003      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003210:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003214:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003220:	673b      	str	r3, [r7, #112]	@ 0x70
 8003222:	2300      	movs	r3, #0
 8003224:	677b      	str	r3, [r7, #116]	@ 0x74
 8003226:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800322a:	460b      	mov	r3, r1
 800322c:	4313      	orrs	r3, r2
 800322e:	d03b      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003230:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003236:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800323a:	d01b      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800323c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003240:	d814      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003242:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003246:	d017      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003248:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800324c:	d80e      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x398>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d014      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003252:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003256:	d109      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003258:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800325c:	3308      	adds	r3, #8
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fc5c 	bl	8003b1c <RCCEx_PLL2_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800326a:	e008      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003274:	bf00      	nop
 8003276:	e002      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10c      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003286:	4b80      	ldr	r3, [pc, #512]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800328c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003290:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003296:	4a7c      	ldr	r2, [pc, #496]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003298:	430b      	orrs	r3, r1
 800329a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800329e:	e003      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032a4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80032a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80032b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032b6:	2300      	movs	r3, #0
 80032b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80032be:	460b      	mov	r3, r1
 80032c0:	4313      	orrs	r3, r2
 80032c2:	d033      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80032c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032ce:	d015      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80032d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d4:	d80e      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80032da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032de:	d109      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032e4:	3308      	adds	r3, #8
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fc18 	bl	8003b1c <RCCEx_PLL2_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80032f2:	e006      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80032fa:	e002      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003302:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800330a:	4b5f      	ldr	r3, [pc, #380]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800330c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003310:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003314:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	4a5b      	ldr	r2, [pc, #364]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800331c:	430b      	orrs	r3, r1
 800331e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003322:	e003      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003328:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800332c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	2100      	movs	r1, #0
 8003336:	6639      	str	r1, [r7, #96]	@ 0x60
 8003338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800333c:	667b      	str	r3, [r7, #100]	@ 0x64
 800333e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003342:	460b      	mov	r3, r1
 8003344:	4313      	orrs	r3, r2
 8003346:	d033      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800334c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003352:	d015      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003358:	d80e      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d012      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800335e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003362:	d109      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003364:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003368:	3308      	adds	r3, #8
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fbd6 	bl	8003b1c <RCCEx_PLL2_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003376:	e006      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800337e:	e002      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800338e:	4b3e      	ldr	r3, [pc, #248]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003394:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003398:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800339c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339e:	4a3a      	ldr	r2, [pc, #232]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033a0:	430b      	orrs	r3, r1
 80033a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80033ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80033b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	2100      	movs	r1, #0
 80033ba:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80033c6:	460b      	mov	r3, r1
 80033c8:	4313      	orrs	r3, r2
 80033ca:	d00e      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80033cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e4:	4a28      	ldr	r2, [pc, #160]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80033e6:	430b      	orrs	r3, r1
 80033e8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80033f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033f8:	2300      	movs	r3, #0
 80033fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80033fc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003400:	460b      	mov	r3, r1
 8003402:	4313      	orrs	r3, r2
 8003404:	d046      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003406:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003410:	d021      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003412:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003416:	d81a      	bhi.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341c:	d01d      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003422:	d814      	bhi.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003424:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003428:	d019      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800342a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342e:	d80e      	bhi.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d016      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003438:	d109      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800343a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800343e:	3308      	adds	r3, #8
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fb6b 	bl	8003b1c <RCCEx_PLL2_Config>
 8003446:	4603      	mov	r3, r0
 8003448:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800344c:	e00a      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003454:	e006      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003456:	bf00      	nop
 8003458:	e004      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800345a:	bf00      	nop
 800345c:	e002      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003464:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800346e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003472:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003476:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347c:	4a02      	ldr	r2, [pc, #8]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800347e:	430b      	orrs	r3, r1
 8003480:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003486:	bf00      	nop
 8003488:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003490:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034a2:	2300      	movs	r3, #0
 80034a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80034aa:	460b      	mov	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	d043      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80034b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80034ba:	d021      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80034bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80034c0:	d81a      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80034c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c6:	d01d      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80034c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034cc:	d814      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80034ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034d2:	d019      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80034d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034d8:	d80e      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x638>
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e2:	d109      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034e8:	3308      	adds	r3, #8
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fb16 	bl	8003b1c <RCCEx_PLL2_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80034f6:	e00a      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034fe:	e006      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003500:	bf00      	nop
 8003502:	e004      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003504:	bf00      	nop
 8003506:	e002      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800350c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003516:	4bb6      	ldr	r3, [pc, #728]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003518:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800351c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003520:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	4ab2      	ldr	r2, [pc, #712]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003528:	430b      	orrs	r3, r1
 800352a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003534:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003538:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003544:	643b      	str	r3, [r7, #64]	@ 0x40
 8003546:	2300      	movs	r3, #0
 8003548:	647b      	str	r3, [r7, #68]	@ 0x44
 800354a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800354e:	460b      	mov	r3, r1
 8003550:	4313      	orrs	r3, r2
 8003552:	d030      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003554:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800355a:	2b05      	cmp	r3, #5
 800355c:	d80f      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800355e:	2b03      	cmp	r3, #3
 8003560:	d211      	bcs.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003562:	2b01      	cmp	r3, #1
 8003564:	d911      	bls.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003566:	2b02      	cmp	r3, #2
 8003568:	d109      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800356a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800356e:	3308      	adds	r3, #8
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fad3 	bl	8003b1c <RCCEx_PLL2_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003584:	e002      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800358a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10c      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003594:	4b96      	ldr	r3, [pc, #600]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800359a:	f023 0107 	bic.w	r1, r3, #7
 800359e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035a4:	4a92      	ldr	r2, [pc, #584]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035a6:	430b      	orrs	r3, r1
 80035a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035ac:	e003      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035b2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80035b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	2100      	movs	r1, #0
 80035c0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80035cc:	460b      	mov	r3, r1
 80035ce:	4313      	orrs	r3, r2
 80035d0:	d022      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80035d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d005      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035e6:	e002      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80035e8:	bf00      	nop
 80035ea:	e000      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80035ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80035f6:	4b7e      	ldr	r3, [pc, #504]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035fc:	f023 0108 	bic.w	r1, r3, #8
 8003600:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003606:	4a7a      	ldr	r2, [pc, #488]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003608:	430b      	orrs	r3, r1
 800360a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800360e:	e003      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003614:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003618:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003624:	633b      	str	r3, [r7, #48]	@ 0x30
 8003626:	2300      	movs	r3, #0
 8003628:	637b      	str	r3, [r7, #52]	@ 0x34
 800362a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800362e:	460b      	mov	r3, r1
 8003630:	4313      	orrs	r3, r2
 8003632:	f000 80b0 	beq.w	8003796 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003636:	4b6f      	ldr	r3, [pc, #444]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	4a6e      	ldr	r2, [pc, #440]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003642:	f7fd faaf 	bl	8000ba4 <HAL_GetTick>
 8003646:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800364a:	e00b      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364c:	f7fd faaa 	bl	8000ba4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d903      	bls.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003662:	e005      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003664:	4b63      	ldr	r3, [pc, #396]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ed      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003670:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 808a 	bne.w	800378e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800367a:	4b5d      	ldr	r3, [pc, #372]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800367c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003684:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d022      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003690:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003696:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800369a:	429a      	cmp	r2, r3
 800369c:	d01b      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800369e:	4b54      	ldr	r3, [pc, #336]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036ac:	4b50      	ldr	r3, [pc, #320]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036b2:	4a4f      	ldr	r2, [pc, #316]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036bc:	4b4c      	ldr	r3, [pc, #304]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036c2:	4a4b      	ldr	r2, [pc, #300]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036cc:	4a48      	ldr	r2, [pc, #288]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d019      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fd fa5f 	bl	8000ba4 <HAL_GetTick>
 80036e6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	e00d      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fd fa5a 	bl	8000ba4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d903      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003706:	e006      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003708:	4b39      	ldr	r3, [pc, #228]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800370a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ea      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003716:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d132      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800371e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800372c:	d10f      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800372e:	4b30      	ldr	r3, [pc, #192]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003736:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800373a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003742:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003746:	4a2a      	ldr	r2, [pc, #168]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003748:	430b      	orrs	r3, r1
 800374a:	61d3      	str	r3, [r2, #28]
 800374c:	e005      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x886>
 800374e:	4b28      	ldr	r3, [pc, #160]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4a27      	ldr	r2, [pc, #156]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003754:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003758:	61d3      	str	r3, [r2, #28]
 800375a:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800375c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003760:	4a23      	ldr	r2, [pc, #140]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003766:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800376a:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800376c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377a:	4a1d      	ldr	r2, [pc, #116]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800377c:	430b      	orrs	r3, r1
 800377e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003782:	e008      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003784:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003788:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003792:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003796:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80037a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a4:	2300      	movs	r3, #0
 80037a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037ac:	460b      	mov	r3, r1
 80037ae:	4313      	orrs	r3, r2
 80037b0:	d038      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80037b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b8:	2b30      	cmp	r3, #48	@ 0x30
 80037ba:	d014      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80037bc:	2b30      	cmp	r3, #48	@ 0x30
 80037be:	d80e      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d012      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x916>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d80a      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d106      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d0:	4b07      	ldr	r3, [pc, #28]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	4a06      	ldr	r2, [pc, #24]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80037d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80037dc:	e00d      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037e4:	e009      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80037e6:	bf00      	nop
 80037e8:	e007      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80037ea:	bf00      	nop
 80037ec:	e005      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x926>
 80037ee:	bf00      	nop
 80037f0:	44020c00 	.word	0x44020c00
 80037f4:	44020800 	.word	0x44020800
        break;
 80037f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003802:	4bb5      	ldr	r3, [pc, #724]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003808:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800380c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	49b1      	ldr	r1, [pc, #708]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800381a:	e003      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003820:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003824:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
 8003836:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d03c      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003840:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003846:	2b04      	cmp	r3, #4
 8003848:	d81d      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800384a:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003865 	.word	0x08003865
 8003854:	08003873 	.word	0x08003873
 8003858:	08003887 	.word	0x08003887
 800385c:	0800388f 	.word	0x0800388f
 8003860:	0800388f 	.word	0x0800388f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003864:	4b9c      	ldr	r3, [pc, #624]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	4a9b      	ldr	r2, [pc, #620]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003870:	e00e      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003872:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003876:	3308      	adds	r3, #8
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f94f 	bl	8003b1c <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003884:	e004      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800388e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003890:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10c      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003898:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800389a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038a8:	498b      	ldr	r1, [pc, #556]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038b6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80038ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038d0:	460b      	mov	r3, r1
 80038d2:	4313      	orrs	r3, r2
 80038d4:	d03c      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80038d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d01f      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d819      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80038e4:	2b18      	cmp	r3, #24
 80038e6:	d01d      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80038e8:	2b18      	cmp	r3, #24
 80038ea:	d815      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d007      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80038f4:	e010      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f6:	4b78      	ldr	r3, [pc, #480]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	4a77      	ldr	r2, [pc, #476]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003900:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003902:	e010      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003904:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003908:	3308      	adds	r3, #8
 800390a:	4618      	mov	r0, r3
 800390c:	f000 f906 	bl	8003b1c <RCCEx_PLL2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003916:	e006      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800391e:	e002      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003926:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10c      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800392e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003934:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003938:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	4966      	ldr	r1, [pc, #408]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003946:	e003      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800394c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003950:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d03e      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800396c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003976:	d020      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800397c:	d819      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800397e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003980:	d01d      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003982:	2bc0      	cmp	r3, #192	@ 0xc0
 8003984:	d815      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d007      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800398e:	e010      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003990:	4b51      	ldr	r3, [pc, #324]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	4a50      	ldr	r2, [pc, #320]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800399c:	e010      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800399e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039a2:	3308      	adds	r3, #8
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f8b9 	bl	8003b1c <RCCEx_PLL2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039b0:	e006      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80039be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80039c8:	4b43      	ldr	r3, [pc, #268]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ce:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80039d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d8:	493f      	ldr	r1, [pc, #252]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039e6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	2100      	movs	r1, #0
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a00:	460b      	mov	r3, r1
 8003a02:	4313      	orrs	r3, r2
 8003a04:	d038      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a10:	d00e      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a16:	d815      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d017      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a20:	d110      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a22:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a2e:	e00e      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a34:	3308      	adds	r3, #8
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f870 	bl	8003b1c <RCCEx_PLL2_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a42:	e004      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a4a:	e000      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8003a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003a56:	4b20      	ldr	r3, [pc, #128]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a66:	491c      	ldr	r1, [pc, #112]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a74:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	2100      	movs	r1, #0
 8003a82:	6039      	str	r1, [r7, #0]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4313      	orrs	r3, r2
 8003a92:	d039      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a9a:	2b30      	cmp	r3, #48	@ 0x30
 8003a9c:	d01e      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003a9e:	2b30      	cmp	r3, #48	@ 0x30
 8003aa0:	d815      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d002      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d007      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003aaa:	e010      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ab8:	e011      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003abe:	3308      	adds	r3, #8
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f82b 	bl	8003b1c <RCCEx_PLL2_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003acc:	e007      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ad4:	e003      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003ad6:	bf00      	nop
 8003ad8:	44020c00 	.word	0x44020c00
        break;
 8003adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ade:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ae8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003aec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af6:	4908      	ldr	r1, [pc, #32]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003afe:	e003      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b04:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003b08:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	37a8      	adds	r7, #168	@ 0xa8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b16:	bf00      	nop
 8003b18:	44020c00 	.word	0x44020c00

08003b1c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003b24:	4b48      	ldr	r3, [pc, #288]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a47      	ldr	r2, [pc, #284]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003b2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b2e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b30:	f7fd f838 	bl	8000ba4 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b38:	f7fd f834 	bl	8000ba4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e07a      	b.n	8003c40 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003b56:	4b3c      	ldr	r3, [pc, #240]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6811      	ldr	r1, [r2, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6852      	ldr	r2, [r2, #4]
 8003b6a:	0212      	lsls	r2, r2, #8
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	4936      	ldr	r1, [pc, #216]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	025b      	lsls	r3, r3, #9
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	061b      	lsls	r3, r3, #24
 8003ba0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ba4:	4928      	ldr	r1, [pc, #160]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003baa:	4b27      	ldr	r3, [pc, #156]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	f023 020c 	bic.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	4924      	ldr	r1, [pc, #144]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003bbc:	4b22      	ldr	r3, [pc, #136]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	f023 0220 	bic.w	r2, r3, #32
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	491f      	ldr	r1, [pc, #124]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	491c      	ldr	r1, [pc, #112]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be0:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003be2:	f023 0310 	bic.w	r3, r3, #16
 8003be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8003be8:	4b17      	ldr	r3, [pc, #92]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bf0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6a12      	ldr	r2, [r2, #32]
 8003bf8:	00d2      	lsls	r2, r2, #3
 8003bfa:	4913      	ldr	r1, [pc, #76]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8003c00:	4b11      	ldr	r3, [pc, #68]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	4a10      	ldr	r2, [pc, #64]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003c06:	f043 0310 	orr.w	r3, r3, #16
 8003c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003c12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c18:	f7fc ffc4 	bl	8000ba4 <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c20:	f7fc ffc0 	bl	8000ba4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e006      	b.n	8003c40 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c32:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <RCCEx_PLL2_Config+0x12c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0

}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	44020c00 	.word	0x44020c00

08003c4c <memset>:
 8003c4c:	4402      	add	r2, r0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d100      	bne.n	8003c56 <memset+0xa>
 8003c54:	4770      	bx	lr
 8003c56:	f803 1b01 	strb.w	r1, [r3], #1
 8003c5a:	e7f9      	b.n	8003c50 <memset+0x4>

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8003c94 <__libc_init_array+0x38>)
 8003c60:	2600      	movs	r6, #0
 8003c62:	4c0d      	ldr	r4, [pc, #52]	@ (8003c98 <__libc_init_array+0x3c>)
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8003c9c <__libc_init_array+0x40>)
 8003c6e:	2600      	movs	r6, #0
 8003c70:	4c0b      	ldr	r4, [pc, #44]	@ (8003ca0 <__libc_init_array+0x44>)
 8003c72:	f000 f817 	bl	8003ca4 <_init>
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	3601      	adds	r6, #1
 8003c86:	4798      	blx	r3
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	3601      	adds	r6, #1
 8003c90:	4798      	blx	r3
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08003ce4 	.word	0x08003ce4
 8003c98:	08003ce4 	.word	0x08003ce4
 8003c9c:	08003ce4 	.word	0x08003ce4
 8003ca0:	08003ce8 	.word	0x08003ce8

08003ca4 <_init>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr

08003cb0 <_fini>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr

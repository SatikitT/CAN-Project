
CAN_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fdc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002174  08002174  00003174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002194  08002194  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002194  08002194  00003194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800219c  0800219c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800219c  0800219c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021a0  080021a0  000031a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080021a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004124  20000010  080021b0  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004134  080021b0  00004134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bd6  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b0  00000000  00000000  00015c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009a09  00000000  00000000  00017fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  000219d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efe  00000000  00000000  000224e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000157cc  00000000  00000000  000233de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013aa4  00000000  00000000  00038baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a8a8  00000000  00000000  0004c64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d6ef6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f1c  00000000  00000000  000d6f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000d8e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800215c 	.word	0x0800215c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800215c 	.word	0x0800215c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{

    if (GPIO_Pin == GPIO_PIN_0 && !dma_busy)
 80004c8:	2801      	cmp	r0, #1
 80004ca:	d000      	beq.n	80004ce <HAL_GPIO_EXTI_Callback+0x6>
 80004cc:	4770      	bx	lr
 80004ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000540 <HAL_GPIO_EXTI_Callback+0x78>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1fa      	bne.n	80004cc <HAL_GPIO_EXTI_Callback+0x4>
{
 80004d6:	b570      	push	{r4, r5, r6, lr}
}

void Read_Pin_Data(uint16_t GPIO_Pin)
{

	if (!timer_started)
 80004d8:	4e1a      	ldr	r6, [pc, #104]	@ (8000544 <HAL_GPIO_EXTI_Callback+0x7c>)
 80004da:	7833      	ldrb	r3, [r6, #0]
 80004dc:	b333      	cbz	r3, 800052c <HAL_GPIO_EXTI_Callback+0x64>
 80004de:	4d1a      	ldr	r5, [pc, #104]	@ (8000548 <HAL_GPIO_EXTI_Callback+0x80>)
		__HAL_TIM_SET_COUNTER(&htim2, 0);
		HAL_TIM_Base_Start(&htim2);
		timer_started = 1;
	}

	now = __HAL_TIM_GET_COUNTER(&htim2);
 80004e0:	682b      	ldr	r3, [r5, #0]
 80004e2:	491a      	ldr	r1, [pc, #104]	@ (800054c <HAL_GPIO_EXTI_Callback+0x84>)
 80004e4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
	level = (GPIOB->IDR & GPIO_Pin) ? 1 : 0;
 80004e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000550 <HAL_GPIO_EXTI_Callback+0x88>)
	now = __HAL_TIM_GET_COUNTER(&htim2);
 80004e8:	600d      	str	r5, [r1, #0]
	level = (GPIOB->IDR & GPIO_Pin) ? 1 : 0;
 80004ea:	6911      	ldr	r1, [r2, #16]

	record_buffer[record_index].start = 17;
 80004ec:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <HAL_GPIO_EXTI_Callback+0x8c>)
	level = (GPIOB->IDR & GPIO_Pin) ? 1 : 0;
 80004ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000558 <HAL_GPIO_EXTI_Callback+0x90>)
	record_buffer[record_index].start = 17;
 80004f0:	881c      	ldrh	r4, [r3, #0]
 80004f2:	481a      	ldr	r0, [pc, #104]	@ (800055c <HAL_GPIO_EXTI_Callback+0x94>)
	level = (GPIOB->IDR & GPIO_Pin) ? 1 : 0;
 80004f4:	f001 0101 	and.w	r1, r1, #1
 80004f8:	7011      	strb	r1, [r2, #0]
	record_buffer[record_index].level = level;
 80004fa:	881a      	ldrh	r2, [r3, #0]
 80004fc:	b292      	uxth	r2, r2
 80004fe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	record_buffer[record_index].start = 17;
 8000502:	b2a4      	uxth	r4, r4
	record_buffer[record_index].level = level;
 8000504:	7051      	strb	r1, [r2, #1]
	record_buffer[record_index].pin = GPIO_Pin;
 8000506:	881a      	ldrh	r2, [r3, #0]
	record_buffer[record_index].timestamp = now;
 8000508:	8819      	ldrh	r1, [r3, #0]
 800050a:	b289      	uxth	r1, r1
 800050c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	record_buffer[record_index].pin = GPIO_Pin;
 8000510:	b292      	uxth	r2, r2
	record_buffer[record_index].timestamp = now;
 8000512:	604d      	str	r5, [r1, #4]
	record_index++;
 8000514:	8819      	ldrh	r1, [r3, #0]
 8000516:	3101      	adds	r1, #1
 8000518:	b289      	uxth	r1, r1
	record_buffer[record_index].pin = GPIO_Pin;
 800051a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	record_index++;
 800051e:	8019      	strh	r1, [r3, #0]
	record_buffer[record_index].start = 17;
 8000520:	2311      	movs	r3, #17
 8000522:	f800 3034 	strb.w	r3, [r0, r4, lsl #3]
	record_buffer[record_index].pin = GPIO_Pin;
 8000526:	2301      	movs	r3, #1
 8000528:	7093      	strb	r3, [r2, #2]
}
 800052a:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 800052c:	4d06      	ldr	r5, [pc, #24]	@ (8000548 <HAL_GPIO_EXTI_Callback+0x80>)
 800052e:	682a      	ldr	r2, [r5, #0]
 8000530:	4604      	mov	r4, r0
 8000532:	6253      	str	r3, [r2, #36]	@ 0x24
		HAL_TIM_Base_Start(&htim2);
 8000534:	4628      	mov	r0, r5
 8000536:	f001 f95d 	bl	80017f4 <HAL_TIM_Base_Start>
		timer_started = 1;
 800053a:	7034      	strb	r4, [r6, #0]
 800053c:	e7d0      	b.n	80004e0 <HAL_GPIO_EXTI_Callback+0x18>
 800053e:	bf00      	nop
 8000540:	2000003a 	.word	0x2000003a
 8000544:	20000039 	.word	0x20000039
 8000548:	200040e8 	.word	0x200040e8
 800054c:	20000034 	.word	0x20000034
 8000550:	40020400 	.word	0x40020400
 8000554:	2000003c 	.word	0x2000003c
 8000558:	20000038 	.word	0x20000038
 800055c:	20000040 	.word	0x20000040

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	2300      	movs	r3, #0
{
 8000564:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800056a:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000572:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4920      	ldr	r1, [pc, #128]	@ (80005f8 <SystemClock_Config+0x98>)
 8000578:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	4a1e      	ldr	r2, [pc, #120]	@ (80005fc <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000586:	6408      	str	r0, [r1, #64]	@ 0x40
 8000588:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800058a:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 800058e:	9101      	str	r1, [sp, #4]
 8000590:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800059a:	6011      	str	r1, [r2, #0]
 800059c:	6812      	ldr	r2, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	930f      	str	r3, [sp, #60]	@ 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2310      	movs	r3, #16
 80005a6:	2101      	movs	r1, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005aa:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ae:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005b0:	2364      	movs	r3, #100	@ 0x64
 80005b2:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b6:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ba:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2202      	movs	r2, #2
 80005be:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	940e      	str	r4, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f000 fdc6 	bl	8001158 <HAL_RCC_OscConfig>
 80005cc:	b108      	cbz	r0, 80005d2 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	210f      	movs	r1, #15
 80005d4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005de:	a803      	add	r0, sp, #12
 80005e0:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e8:	f000 ffcc 	bl	8001584 <HAL_RCC_ClockConfig>
 80005ec:	b108      	cbz	r0, 80005f2 <SystemClock_Config+0x92>
 80005ee:	b672      	cpsid	i
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <SystemClock_Config+0x90>
}
 80005f2:	b014      	add	sp, #80	@ 0x50
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <main>:
{
 8000600:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2400      	movs	r4, #0
{
 8000606:	b08d      	sub	sp, #52	@ 0x34
  HAL_Init();
 8000608:	f000 f9ec 	bl	80009e4 <HAL_Init>
  SystemClock_Config();
 800060c:	f7ff ffa8 	bl	8000560 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4d59      	ldr	r5, [pc, #356]	@ (800077c <main+0x17c>)
 8000616:	9402      	str	r4, [sp, #8]
 8000618:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	4859      	ldr	r0, [pc, #356]	@ (8000780 <main+0x180>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	632b      	str	r3, [r5, #48]	@ 0x30
 8000622:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	9403      	str	r4, [sp, #12]
 800062e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	632b      	str	r3, [r5, #48]	@ 0x30
 8000636:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000638:	f003 0302 	and.w	r3, r3, #2
 800063c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000644:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064a:	2301      	movs	r3, #1
 800064c:	9308      	str	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	9a03      	ldr	r2, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000650:	f000 fc80 	bl	8000f54 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000654:	4622      	mov	r2, r4
 8000656:	4621      	mov	r1, r4
 8000658:	2006      	movs	r0, #6
 800065a:	f000 fa01 	bl	8000a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800065e:	2006      	movs	r0, #6
 8000660:	f000 fa3a 	bl	8000ad8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000664:	9401      	str	r4, [sp, #4]
 8000666:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000668:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800066c:	632b      	str	r3, [r5, #48]	@ 0x30
 800066e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  huart2.Instance = USART2;
 8000670:	4d44      	ldr	r5, [pc, #272]	@ (8000784 <main+0x184>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000676:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000678:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800067a:	4621      	mov	r1, r4
 800067c:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000680:	f000 f9ee 	bl	8000a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000684:	2011      	movs	r0, #17
 8000686:	f000 fa27 	bl	8000ad8 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 1152000;
 800068a:	4b3f      	ldr	r3, [pc, #252]	@ (8000788 <main+0x188>)
 800068c:	4a3f      	ldr	r2, [pc, #252]	@ (800078c <main+0x18c>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 1152000;
 8000690:	e9c5 2300 	strd	r2, r3, [r5]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000696:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069a:	e9c5 4304 	strd	r4, r3, [r5, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069e:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	f001 f9ad 	bl	8001a00 <HAL_UART_Init>
 80006a6:	b108      	cbz	r0, 80006ac <main+0xac>
 80006a8:	b672      	cpsid	i
  while (1)
 80006aa:	e7fe      	b.n	80006aa <main+0xaa>
  htim2.Instance = TIM2;
 80006ac:	f8df b0ec 	ldr.w	fp, [pc, #236]	@ 800079c <main+0x19c>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006b0:	900a      	str	r0, [sp, #40]	@ 0x28
  htim2.Instance = TIM2;
 80006b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006b6:	f8cb 2000 	str.w	r2, [fp]
  htim2.Init.Prescaler = 9;
 80006ba:	2209      	movs	r2, #9
 80006bc:	f8cb 2004 	str.w	r2, [fp, #4]
  htim2.Init.Period = 4294967295;
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	4603      	mov	r3, r0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006c6:	e9cd 0006 	strd	r0, r0, [sp, #24]
 80006ca:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim2.Init.Period = 4294967295;
 80006ce:	e9cb 0202 	strd	r0, r2, [fp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d2:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d4:	4658      	mov	r0, fp
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	f8cb 3010 	str.w	r3, [fp, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	f8cb 3018 	str.w	r3, [fp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006e0:	f001 f80e 	bl	8001700 <HAL_TIM_Base_Init>
 80006e4:	b108      	cbz	r0, 80006ea <main+0xea>
 80006e6:	b672      	cpsid	i
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0xe8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80006ea:	2600      	movs	r6, #0
 80006ec:	2700      	movs	r7, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80006ee:	a906      	add	r1, sp, #24
 80006f0:	4658      	mov	r0, fp
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80006f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80006f6:	f001 f8bf 	bl	8001878 <HAL_TIM_SlaveConfigSynchro>
 80006fa:	b108      	cbz	r0, 8000700 <main+0x100>
 80006fc:	b672      	cpsid	i
  while (1)
 80006fe:	e7fe      	b.n	80006fe <main+0xfe>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000700:	a904      	add	r1, sp, #16
 8000702:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000708:	f001 f942 	bl	8001990 <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	2800      	cmp	r0, #0
 800070e:	d133      	bne.n	8000778 <main+0x178>
 8000710:	4c1f      	ldr	r4, [pc, #124]	@ (8000790 <main+0x190>)
 8000712:	4e20      	ldr	r6, [pc, #128]	@ (8000794 <main+0x194>)
 8000714:	f8df a088 	ldr.w	sl, [pc, #136]	@ 80007a0 <main+0x1a0>
 8000718:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80007a4 <main+0x1a4>
 800071c:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80007a8 <main+0x1a8>
		  current_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000720:	f8db 2000 	ldr.w	r2, [fp]
		  if (current_time >= FRAME_IDLE_THRESHOLD)
 8000724:	f643 2197 	movw	r1, #14999	@ 0x3a97
	  if (record_index > 0)
 8000728:	8823      	ldrh	r3, [r4, #0]
 800072a:	b29b      	uxth	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0fb      	beq.n	8000728 <main+0x128>
		  current_time = __HAL_TIM_GET_COUNTER(&htim2);
 8000730:	6a50      	ldr	r0, [r2, #36]	@ 0x24
		  last_timestamp = record_buffer[record_index - 1].timestamp;
 8000732:	8823      	ldrh	r3, [r4, #0]
		  if (current_time >= FRAME_IDLE_THRESHOLD)
 8000734:	4288      	cmp	r0, r1
		  last_timestamp = record_buffer[record_index - 1].timestamp;
 8000736:	b29b      	uxth	r3, r3
		  if (current_time >= FRAME_IDLE_THRESHOLD)
 8000738:	d9f6      	bls.n	8000728 <main+0x128>
		  last_timestamp = record_buffer[record_index - 1].timestamp;
 800073a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
	  		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800073e:	2700      	movs	r7, #0
		  last_timestamp = record_buffer[record_index - 1].timestamp;
 8000740:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8000744:	f8ca 0000 	str.w	r0, [sl]
	  		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000748:	6257      	str	r7, [r2, #36]	@ 0x24
			  HAL_TIM_Base_Stop(&htim2);
 800074a:	4658      	mov	r0, fp
 800074c:	f8c9 3000 	str.w	r3, [r9]
 8000750:	f001 f87e 	bl	8001850 <HAL_TIM_Base_Stop>
			  dma_busy = 1;
 8000754:	4a10      	ldr	r2, [pc, #64]	@ (8000798 <main+0x198>)
			  timer_started = 0;
 8000756:	f888 7000 	strb.w	r7, [r8]
			  dma_busy = 1;
 800075a:	2301      	movs	r3, #1
			  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800075c:	2006      	movs	r0, #6
			  dma_busy = 1;
 800075e:	7013      	strb	r3, [r2, #0]
			  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000760:	f000 f9c8 	bl	8000af4 <HAL_NVIC_DisableIRQ>
			  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)record_buffer, sizeof(EdgeRecord) * record_index);
 8000764:	8822      	ldrh	r2, [r4, #0]
 8000766:	b292      	uxth	r2, r2
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	4631      	mov	r1, r6
 800076c:	b292      	uxth	r2, r2
 800076e:	4628      	mov	r0, r5
 8000770:	f001 f9d8 	bl	8001b24 <HAL_UART_Transmit_DMA>
			  record_index = 0;
 8000774:	8027      	strh	r7, [r4, #0]
 8000776:	e7d3      	b.n	8000720 <main+0x120>
 8000778:	b672      	cpsid	i
  while (1)
 800077a:	e7fe      	b.n	800077a <main+0x17a>
 800077c:	40023800 	.word	0x40023800
 8000780:	40020400 	.word	0x40020400
 8000784:	200040a0 	.word	0x200040a0
 8000788:	00119400 	.word	0x00119400
 800078c:	40004400 	.word	0x40004400
 8000790:	2000003c 	.word	0x2000003c
 8000794:	20000040 	.word	0x20000040
 8000798:	2000003a 	.word	0x2000003a
 800079c:	200040e8 	.word	0x200040e8
 80007a0:	20000030 	.word	0x20000030
 80007a4:	2000002c 	.word	0x2000002c
 80007a8:	20000039 	.word	0x20000039

080007ac <HAL_UART_TxCpltCallback>:
    if (huart->Instance == USART2)
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <HAL_UART_TxCpltCallback+0x18>)
 80007ae:	6802      	ldr	r2, [r0, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d000      	beq.n	80007b6 <HAL_UART_TxCpltCallback+0xa>
}
 80007b4:	4770      	bx	lr
        dma_busy = 0;
 80007b6:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <HAL_UART_TxCpltCallback+0x1c>)
 80007b8:	2200      	movs	r2, #0
        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007ba:	2006      	movs	r0, #6
        dma_busy = 0;
 80007bc:	701a      	strb	r2, [r3, #0]
        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007be:	f000 b98b 	b.w	8000ad8 <HAL_NVIC_EnableIRQ>
 80007c2:	bf00      	nop
 80007c4:	40004400 	.word	0x40004400
 80007c8:	2000003a 	.word	0x2000003a

080007cc <Error_Handler>:
 80007cc:	b672      	cpsid	i
  while (1)
 80007ce:	e7fe      	b.n	80007ce <Error_Handler+0x2>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_MspInit+0x34>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	9100      	str	r1, [sp, #0]
 80007d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007de:	645a      	str	r2, [r3, #68]	@ 0x44
 80007e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007e2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007e6:	9200      	str	r2, [sp, #0]
 80007e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	9101      	str	r1, [sp, #4]
 80007ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80007f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	b002      	add	sp, #8
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000808:	6803      	ldr	r3, [r0, #0]
 800080a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800080e:	d000      	beq.n	8000812 <HAL_TIM_Base_MspInit+0xa>
 8000810:	4770      	bx	lr
{
 8000812:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000814:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8000818:	2200      	movs	r2, #0
 800081a:	9201      	str	r2, [sp, #4]
 800081c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800081e:	f042 0201 	orr.w	r2, r2, #1
 8000822:	641a      	str	r2, [r3, #64]	@ 0x40
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800082e:	b002      	add	sp, #8
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8000836:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <HAL_UART_MspInit+0xac>)
 8000838:	6802      	ldr	r2, [r0, #0]
{
 800083a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 800083e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000844:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000848:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 800084a:	d001      	beq.n	8000850 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084c:	b008      	add	sp, #32
 800084e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000850:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8000854:	9400      	str	r4, [sp, #0]
 8000856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000858:	4e22      	ldr	r6, [pc, #136]	@ (80008e4 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800085a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800085e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000862:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000866:	9200      	str	r2, [sp, #0]
 8000868:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	9401      	str	r4, [sp, #4]
 800086c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800086e:	f042 0201 	orr.w	r2, r2, #1
 8000872:	631a      	str	r2, [r3, #48]	@ 0x30
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800087c:	220c      	movs	r2, #12
 800087e:	2302      	movs	r3, #2
 8000880:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	9305      	str	r3, [sp, #20]
 8000888:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	4816      	ldr	r0, [pc, #88]	@ (80008e8 <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f000 fb5e 	bl	8000f54 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000898:	4a14      	ldr	r2, [pc, #80]	@ (80008ec <HAL_UART_MspInit+0xb8>)
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800089a:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800089c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a0:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008a4:	4630      	mov	r0, r6
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a6:	2240      	movs	r2, #64	@ 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ac:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b0:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008b4:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008b8:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008ba:	f000 f947 	bl	8000b4c <HAL_DMA_Init>
 80008be:	b958      	cbnz	r0, 80008d8 <HAL_UART_MspInit+0xa4>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008c2:	63ae      	str	r6, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008c4:	4611      	mov	r1, r2
 80008c6:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008c8:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ca:	f000 f8c9 	bl	8000a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ce:	2026      	movs	r0, #38	@ 0x26
 80008d0:	f000 f902 	bl	8000ad8 <HAL_NVIC_EnableIRQ>
}
 80008d4:	b008      	add	sp, #32
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80008d8:	f7ff ff78 	bl	80007cc <Error_Handler>
 80008dc:	e7f0      	b.n	80008c0 <HAL_UART_MspInit+0x8c>
 80008de:	bf00      	nop
 80008e0:	40004400 	.word	0x40004400
 80008e4:	20004040 	.word	0x20004040
 80008e8:	40020000 	.word	0x40020000
 80008ec:	400260a0 	.word	0x400260a0

080008f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler>
 80008f2:	bf00      	nop

080008f4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <HardFault_Handler>
 80008f6:	bf00      	nop

080008f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler>
 80008fa:	bf00      	nop

080008fc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <BusFault_Handler>
 80008fe:	bf00      	nop

08000900 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler>
 8000902:	bf00      	nop

08000904 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 b882 	b.w	8000a18 <HAL_IncTick>

08000914 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000914:	2001      	movs	r0, #1
 8000916:	f000 bc13 	b.w	8001140 <HAL_GPIO_EXTI_IRQHandler>
 800091a:	bf00      	nop

0800091c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800091c:	4801      	ldr	r0, [pc, #4]	@ (8000924 <DMA1_Stream6_IRQHandler+0x8>)
 800091e:	f000 ba43 	b.w	8000da8 <HAL_DMA_IRQHandler>
 8000922:	bf00      	nop
 8000924:	20004040 	.word	0x20004040

08000928 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000928:	4801      	ldr	r0, [pc, #4]	@ (8000930 <USART2_IRQHandler+0x8>)
 800092a:	f001 ba3d 	b.w	8001da8 <HAL_UART_IRQHandler>
 800092e:	bf00      	nop
 8000930:	200040a0 	.word	0x200040a0

08000934 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4a03      	ldr	r2, [pc, #12]	@ (8000944 <SystemInit+0x10>)
 8000936:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800093a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000980 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800094c:	f7ff fff2 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	@ (8000988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	@ (8000994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f001 fbcd 	bl	8002114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fe41 	bl	8000600 <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800098c:	080021a4 	.word	0x080021a4
  ldr r2, =_sbss
 8000990:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000994:	20004134 	.word	0x20004134

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>
	...

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099e:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <HAL_InitTick+0x3c>)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <HAL_InitTick+0x40>)
 80009a2:	7812      	ldrb	r2, [r2, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
{
 80009a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ac:	fbb0 f0f2 	udiv	r0, r0, r2
 80009b0:	fbb3 f0f0 	udiv	r0, r3, r0
 80009b4:	f000 f8b0 	bl	8000b18 <HAL_SYSTICK_Config>
 80009b8:	b908      	cbnz	r0, 80009be <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	2d0f      	cmp	r5, #15
 80009bc:	d901      	bls.n	80009c2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80009be:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009c0:	bd38      	pop	{r3, r4, r5, pc}
 80009c2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	4602      	mov	r2, r0
 80009c6:	4629      	mov	r1, r5
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f000 f848 	bl	8000a60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <HAL_InitTick+0x44>)
 80009d2:	4620      	mov	r0, r4
 80009d4:	601d      	str	r5, [r3, #0]
}
 80009d6:	bd38      	pop	{r3, r4, r5, pc}
 80009d8:	20000004 	.word	0x20000004
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008

080009e4 <HAL_Init>:
{
 80009e4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <HAL_Init+0x30>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009ee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80009f6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80009fe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f81b 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f7ff ffc8 	bl	800099c <HAL_InitTick>
  HAL_MspInit();
 8000a0c:	f7ff fee0 	bl	80007d0 <HAL_MspInit>
}
 8000a10:	2000      	movs	r0, #0
 8000a12:	bd08      	pop	{r3, pc}
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a18:	4a03      	ldr	r2, [pc, #12]	@ (8000a28 <HAL_IncTick+0x10>)
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <HAL_IncTick+0x14>)
 8000a1c:	6811      	ldr	r1, [r2, #0]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	440b      	add	r3, r1
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20004130 	.word	0x20004130
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a30:	4b01      	ldr	r3, [pc, #4]	@ (8000a38 <HAL_GetTick+0x8>)
 8000a32:	6818      	ldr	r0, [r3, #0]
}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20004130 	.word	0x20004130

08000a3c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4907      	ldr	r1, [pc, #28]	@ (8000a5c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a3e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a46:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a56:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <HAL_NVIC_SetPriority+0x70>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a68:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6a:	f1c3 0e07 	rsb	lr, r3, #7
 8000a6e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a76:	bf28      	it	cs
 8000a78:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7c:	f1bc 0f06 	cmp.w	ip, #6
 8000a80:	d91c      	bls.n	8000abc <HAL_NVIC_SetPriority+0x5c>
 8000a82:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	fa03 f30c 	lsl.w	r3, r3, ip
 8000a8e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	fa03 f30e 	lsl.w	r3, r3, lr
 8000a9a:	ea21 0303 	bic.w	r3, r1, r3
 8000a9e:	fa03 f30c 	lsl.w	r3, r3, ip
 8000aa2:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	db0a      	blt.n	8000ac2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ab0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000ab4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000abc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	4694      	mov	ip, r2
 8000ac0:	e7e7      	b.n	8000a92 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_NVIC_SetPriority+0x74>)
 8000ac4:	f000 000f 	and.w	r0, r0, #15
 8000ac8:	4402      	add	r2, r0
 8000aca:	7613      	strb	r3, [r2, #24]
 8000acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	e000ecfc 	.word	0xe000ecfc

08000ad8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	db07      	blt.n	8000aec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_NVIC_EnableIRQ+0x18>)
 8000ade:	0941      	lsrs	r1, r0, #5
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	f000 001f 	and.w	r0, r0, #31
 8000ae6:	4083      	lsls	r3, r0
 8000ae8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000af4:	2800      	cmp	r0, #0
 8000af6:	db0c      	blt.n	8000b12 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af8:	0943      	lsrs	r3, r0, #5
 8000afa:	4906      	ldr	r1, [pc, #24]	@ (8000b14 <HAL_NVIC_DisableIRQ+0x20>)
 8000afc:	f000 001f 	and.w	r0, r0, #31
 8000b00:	3320      	adds	r3, #32
 8000b02:	2201      	movs	r2, #1
 8000b04:	4082      	lsls	r2, r0
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b0e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	3801      	subs	r0, #1
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b1e:	d301      	bcc.n	8000b24 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b20:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b22:	4770      	bx	lr
{
 8000b24:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	4c07      	ldr	r4, [pc, #28]	@ (8000b48 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8000b32:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b36:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b38:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	619a      	str	r2, [r3, #24]
}
 8000b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	6119      	str	r1, [r3, #16]
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ff6e 	bl	8000a30 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000b54:	2c00      	cmp	r4, #0
 8000b56:	d06f      	beq.n	8000c38 <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000b58:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000b5a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000b62:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	f022 0201 	bic.w	r2, r2, #1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b70:	e005      	b.n	8000b7e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b72:	f7ff ff5d 	bl	8000a30 <HAL_GetTick>
 8000b76:	1b43      	subs	r3, r0, r5
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d839      	bhi.n	8000bf0 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	07d1      	lsls	r1, r2, #31
 8000b82:	d4f6      	bmi.n	8000b72 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b84:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8000b88:	68e1      	ldr	r1, [r4, #12]
 8000b8a:	4302      	orrs	r2, r0
 8000b8c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b8e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b92:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b94:	432a      	orrs	r2, r5
 8000b96:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b98:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8000b9a:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b9c:	4302      	orrs	r2, r0
 8000b9e:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ba0:	4932      	ldr	r1, [pc, #200]	@ (8000c6c <HAL_DMA_Init+0x120>)
 8000ba2:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ba4:	6a25      	ldr	r5, [r4, #32]
 8000ba6:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ba8:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000baa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000bac:	2904      	cmp	r1, #4
 8000bae:	d026      	beq.n	8000bfe <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000bb0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000bb2:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000bb4:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000bb8:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000bba:	b2d8      	uxtb	r0, r3
 8000bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8000c70 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8000bbe:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000bc0:	3810      	subs	r0, #16
 8000bc2:	fba2 5200 	umull	r5, r2, r2, r0
 8000bc6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000bc8:	492a      	ldr	r1, [pc, #168]	@ (8000c74 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000bce:	5c89      	ldrb	r1, [r1, r2]
 8000bd0:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bd2:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8000bd6:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bd8:	bf88      	it	hi
 8000bda:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bdc:	223f      	movs	r2, #63	@ 0x3f
 8000bde:	408a      	lsls	r2, r1
 8000be0:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000be2:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000be4:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8000be6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000be8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000bea:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8000bee:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bf6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8000bfa:	4618      	mov	r0, r3
}
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000bfe:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8000c02:	4329      	orrs	r1, r5
 8000c04:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8000c06:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000c08:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8000c0a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c0c:	f021 0107 	bic.w	r1, r1, #7
 8000c10:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8000c12:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0cf      	beq.n	8000bba <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000c1a:	b178      	cbz	r0, 8000c3c <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000c1c:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000c20:	d016      	beq.n	8000c50 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000c22:	2a02      	cmp	r2, #2
 8000c24:	d903      	bls.n	8000c2e <HAL_DMA_Init+0xe2>
 8000c26:	2a03      	cmp	r2, #3
 8000c28:	d1c7      	bne.n	8000bba <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c2a:	01ea      	lsls	r2, r5, #7
 8000c2c:	d5c5      	bpl.n	8000bba <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c2e:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000c30:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c32:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000c34:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8000c38:	2001      	movs	r0, #1
}
 8000c3a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8000c3c:	2a01      	cmp	r2, #1
 8000c3e:	d003      	beq.n	8000c48 <HAL_DMA_Init+0xfc>
 8000c40:	f032 0202 	bics.w	r2, r2, #2
 8000c44:	d1b9      	bne.n	8000bba <HAL_DMA_Init+0x6e>
 8000c46:	e7f0      	b.n	8000c2a <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c48:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8000c4c:	d1b5      	bne.n	8000bba <HAL_DMA_Init+0x6e>
 8000c4e:	e7ee      	b.n	8000c2e <HAL_DMA_Init+0xe2>
    switch (tmp)
 8000c50:	2a03      	cmp	r2, #3
 8000c52:	d8b2      	bhi.n	8000bba <HAL_DMA_Init+0x6e>
 8000c54:	a001      	add	r0, pc, #4	@ (adr r0, 8000c5c <HAL_DMA_Init+0x110>)
 8000c56:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000c5a:	bf00      	nop
 8000c5c:	08000c2f 	.word	0x08000c2f
 8000c60:	08000c2b 	.word	0x08000c2b
 8000c64:	08000c2f 	.word	0x08000c2f
 8000c68:	08000c49 	.word	0x08000c49
 8000c6c:	f010803f 	.word	0xf010803f
 8000c70:	aaaaaaab 	.word	0xaaaaaaab
 8000c74:	0800218c 	.word	0x0800218c

08000c78 <HAL_DMA_Start_IT>:
{
 8000c78:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8000c7a:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c7e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8000c80:	2c01      	cmp	r4, #1
 8000c82:	d00a      	beq.n	8000c9a <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c84:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
  __HAL_LOCK(hdma);
 8000c88:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c8c:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8000c8e:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c92:	d005      	beq.n	8000ca0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000c94:	2300      	movs	r3, #0
 8000c96:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8000c9a:	2002      	movs	r0, #2
}
 8000c9c:	bc70      	pop	{r4, r5, r6}
 8000c9e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ca0:	2602      	movs	r6, #2
 8000ca2:	f880 6035 	strb.w	r6, [r0, #53]	@ 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000ca6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca8:	2600      	movs	r6, #0
 8000caa:	6546      	str	r6, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000cac:	6826      	ldr	r6, [r4, #0]
 8000cae:	f426 2680 	bic.w	r6, r6, #262144	@ 0x40000
 8000cb2:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000cb4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cb6:	6883      	ldr	r3, [r0, #8]
 8000cb8:	2b40      	cmp	r3, #64	@ 0x40
    hdma->Instance->PAR = DstAddress;
 8000cba:	bf0e      	itee	eq
 8000cbc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000cbe:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000cc0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cc2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000cc4:	bf08      	it	eq
 8000cc6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cc8:	233f      	movs	r3, #63	@ 0x3f
 8000cca:	4093      	lsls	r3, r2
 8000ccc:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000cce:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000cd0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000cd2:	f043 0316 	orr.w	r3, r3, #22
 8000cd6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000cd8:	b11a      	cbz	r2, 8000ce2 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000ce8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000cea:	6023      	str	r3, [r4, #0]
}
 8000cec:	bc70      	pop	{r4, r5, r6}
 8000cee:	4770      	bx	lr

08000cf0 <HAL_DMA_Abort>:
{
 8000cf0:	b570      	push	{r4, r5, r6, lr}
 8000cf2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cf4:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8000cf6:	f7ff fe9b 	bl	8000a30 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfa:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d006      	beq.n	8000d10 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d02:	2380      	movs	r3, #128	@ 0x80
 8000d04:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8000d06:	2300      	movs	r3, #0
 8000d08:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
}
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	f022 0216 	bic.w	r2, r2, #22
 8000d18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d20:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d22:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000d24:	4605      	mov	r5, r0
 8000d26:	b342      	cbz	r2, 8000d7a <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	f022 0208 	bic.w	r2, r2, #8
 8000d2e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	f022 0201 	bic.w	r2, r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d38:	e005      	b.n	8000d46 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d3a:	f7ff fe79 	bl	8000a30 <HAL_GetTick>
 8000d3e:	1b43      	subs	r3, r0, r5
 8000d40:	2b05      	cmp	r3, #5
 8000d42:	d810      	bhi.n	8000d66 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f013 0301 	ands.w	r3, r3, #1
 8000d4c:	d1f5      	bne.n	8000d3a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d4e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8000d50:	223f      	movs	r2, #63	@ 0x3f
 8000d52:	408a      	lsls	r2, r1
  return HAL_OK;
 8000d54:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8000d56:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8000d58:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d5a:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000d5c:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8000d60:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d68:	2220      	movs	r2, #32
 8000d6a:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8000d6c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d6e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8000d72:	2300      	movs	r3, #0
 8000d74:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d7a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d1d3      	bne.n	8000d28 <HAL_DMA_Abort+0x38>
 8000d80:	e7d6      	b.n	8000d30 <HAL_DMA_Abort+0x40>
 8000d82:	bf00      	nop

08000d84 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d84:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d003      	beq.n	8000d94 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
 8000d92:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000d94:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d96:	2305      	movs	r3, #5
 8000d98:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8000da2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000da4:	6013      	str	r3, [r2, #0]
}
 8000da6:	4770      	bx	lr

08000da8 <HAL_DMA_IRQHandler>:
{
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8000dac:	4a67      	ldr	r2, [pc, #412]	@ (8000f4c <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dae:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000db0:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000db6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8000db8:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dba:	2208      	movs	r2, #8
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	422a      	tst	r2, r5
{
 8000dc0:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dc2:	d003      	beq.n	8000dcc <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000dc4:	6801      	ldr	r1, [r0, #0]
 8000dc6:	6808      	ldr	r0, [r1, #0]
 8000dc8:	0740      	lsls	r0, r0, #29
 8000dca:	d478      	bmi.n	8000ebe <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	422a      	tst	r2, r5
 8000dd2:	d003      	beq.n	8000ddc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000dd4:	6821      	ldr	r1, [r4, #0]
 8000dd6:	6949      	ldr	r1, [r1, #20]
 8000dd8:	0608      	lsls	r0, r1, #24
 8000dda:	d46a      	bmi.n	8000eb2 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	409a      	lsls	r2, r3
 8000de0:	422a      	tst	r2, r5
 8000de2:	d003      	beq.n	8000dec <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000de4:	6821      	ldr	r1, [r4, #0]
 8000de6:	6809      	ldr	r1, [r1, #0]
 8000de8:	0789      	lsls	r1, r1, #30
 8000dea:	d45c      	bmi.n	8000ea6 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000dec:	2210      	movs	r2, #16
 8000dee:	409a      	lsls	r2, r3
 8000df0:	422a      	tst	r2, r5
 8000df2:	d003      	beq.n	8000dfc <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000df4:	6821      	ldr	r1, [r4, #0]
 8000df6:	6808      	ldr	r0, [r1, #0]
 8000df8:	0700      	lsls	r0, r0, #28
 8000dfa:	d441      	bmi.n	8000e80 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	422a      	tst	r2, r5
 8000e02:	d014      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000e04:	6821      	ldr	r1, [r4, #0]
 8000e06:	6808      	ldr	r0, [r1, #0]
 8000e08:	06c0      	lsls	r0, r0, #27
 8000e0a:	d510      	bpl.n	8000e2e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000e0c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000e0e:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8000e12:	2a05      	cmp	r2, #5
 8000e14:	d063      	beq.n	8000ede <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e16:	680b      	ldr	r3, [r1, #0]
 8000e18:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e1c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e1e:	d07e      	beq.n	8000f1e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e20:	0319      	lsls	r1, r3, #12
 8000e22:	f140 8089 	bpl.w	8000f38 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8000e26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000e28:	b10b      	cbz	r3, 8000e2e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e30:	b323      	cbz	r3, 8000e7c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e34:	07da      	lsls	r2, r3, #31
 8000e36:	d51a      	bpl.n	8000e6e <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8000e38:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e3a:	4945      	ldr	r1, [pc, #276]	@ (8000f50 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8000e42:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e44:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8000e48:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e4c:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e002      	b.n	8000e58 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e52:	6813      	ldr	r3, [r2, #0]
 8000e54:	07db      	lsls	r3, r3, #31
 8000e56:	d504      	bpl.n	8000e62 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8000e58:	9b01      	ldr	r3, [sp, #4]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	42b3      	cmp	r3, r6
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	d9f7      	bls.n	8000e52 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8000e62:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8000e64:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8000e66:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8000e6a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8000e6e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000e70:	b123      	cbz	r3, 8000e7c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8000e72:	4620      	mov	r0, r4
}
 8000e74:	b003      	add	sp, #12
 8000e76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000e7a:	4718      	bx	r3
}
 8000e7c:	b003      	add	sp, #12
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e80:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e82:	680a      	ldr	r2, [r1, #0]
 8000e84:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e88:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e8a:	d122      	bne.n	8000ed2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e8c:	05d2      	lsls	r2, r2, #23
 8000e8e:	d403      	bmi.n	8000e98 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e90:	680a      	ldr	r2, [r1, #0]
 8000e92:	f022 0208 	bic.w	r2, r2, #8
 8000e96:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000e98:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	d0ae      	beq.n	8000dfc <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ea2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000ea4:	e7aa      	b.n	8000dfc <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ea6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ea8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000eaa:	f042 0204 	orr.w	r2, r2, #4
 8000eae:	6562      	str	r2, [r4, #84]	@ 0x54
 8000eb0:	e79c      	b.n	8000dec <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000eb2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000eb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000eb6:	f042 0202 	orr.w	r2, r2, #2
 8000eba:	6562      	str	r2, [r4, #84]	@ 0x54
 8000ebc:	e78e      	b.n	8000ddc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ebe:	6808      	ldr	r0, [r1, #0]
 8000ec0:	f020 0004 	bic.w	r0, r0, #4
 8000ec4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ec6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000eca:	f042 0201 	orr.w	r2, r2, #1
 8000ece:	6562      	str	r2, [r4, #84]	@ 0x54
 8000ed0:	e77c      	b.n	8000dcc <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ed2:	0311      	lsls	r1, r2, #12
 8000ed4:	d5e0      	bpl.n	8000e98 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ed6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d1e0      	bne.n	8000e9e <HAL_DMA_IRQHandler+0xf6>
 8000edc:	e78e      	b.n	8000dfc <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ede:	680a      	ldr	r2, [r1, #0]
 8000ee0:	f022 0216 	bic.w	r2, r2, #22
 8000ee4:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ee6:	694a      	ldr	r2, [r1, #20]
 8000ee8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eec:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000ef0:	b33a      	cbz	r2, 8000f42 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ef2:	680a      	ldr	r2, [r1, #0]
 8000ef4:	f022 0208 	bic.w	r2, r2, #8
 8000ef8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000efa:	223f      	movs	r2, #63	@ 0x3f
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8000f00:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f02:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000f04:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8000f06:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8000f08:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000f0c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8000f10:	2900      	cmp	r1, #0
 8000f12:	d0b3      	beq.n	8000e7c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8000f14:	4620      	mov	r0, r4
}
 8000f16:	b003      	add	sp, #12
 8000f18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8000f1c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f1e:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8000f22:	d180      	bne.n	8000e26 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000f24:	680a      	ldr	r2, [r1, #0]
 8000f26:	f022 0210 	bic.w	r2, r2, #16
 8000f2a:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8000f32:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8000f36:	e776      	b.n	8000e26 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8000f38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f47f af75 	bne.w	8000e2a <HAL_DMA_IRQHandler+0x82>
 8000f40:	e775      	b.n	8000e2e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f42:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d1d4      	bne.n	8000ef2 <HAL_DMA_IRQHandler+0x14a>
 8000f48:	e7d7      	b.n	8000efa <HAL_DMA_IRQHandler+0x152>
 8000f4a:	bf00      	nop
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	1b4e81b5 	.word	0x1b4e81b5

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f58:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8001134 <HAL_GPIO_Init+0x1e0>
{
 8000f60:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8000f62:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f66:	4689      	mov	r9, r1
 8000f68:	e003      	b.n	8000f72 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	f000 8082 	beq.w	8001076 <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 8000f72:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8000f7a:	43a2      	bics	r2, r4
 8000f7c:	d1f5      	bne.n	8000f6a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000f82:	f001 0203 	and.w	r2, r1, #3
 8000f86:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f94:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f98:	d970      	bls.n	800107c <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9a:	2a03      	cmp	r2, #3
 8000f9c:	f040 80a7 	bne.w	80010ee <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8000fa0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa2:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000faa:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000fae:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb0:	d0db      	beq.n	8000f6a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	9203      	str	r2, [sp, #12]
 8000fb6:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8000fba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fbe:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8000fc2:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8000fc6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000fca:	9203      	str	r2, [sp, #12]
 8000fcc:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	f023 0203 	bic.w	r2, r3, #3
 8000fd2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd6:	f003 0703 	and.w	r7, r3, #3
 8000fda:	260f      	movs	r6, #15
 8000fdc:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8000fe0:	00bf      	lsls	r7, r7, #2
 8000fe2:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	4e50      	ldr	r6, [pc, #320]	@ (8001128 <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe8:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff0:	d018      	beq.n	8001024 <HAL_GPIO_Init+0xd0>
 8000ff2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8000ff6:	42b0      	cmp	r0, r6
 8000ff8:	f000 8084 	beq.w	8001104 <HAL_GPIO_Init+0x1b0>
 8000ffc:	4e4b      	ldr	r6, [pc, #300]	@ (800112c <HAL_GPIO_Init+0x1d8>)
 8000ffe:	42b0      	cmp	r0, r6
 8001000:	f000 8086 	beq.w	8001110 <HAL_GPIO_Init+0x1bc>
 8001004:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8001138 <HAL_GPIO_Init+0x1e4>
 8001008:	4560      	cmp	r0, ip
 800100a:	f000 8087 	beq.w	800111c <HAL_GPIO_Init+0x1c8>
 800100e:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 800113c <HAL_GPIO_Init+0x1e8>
 8001012:	4560      	cmp	r0, ip
 8001014:	bf0c      	ite	eq
 8001016:	f04f 0c04 	moveq.w	ip, #4
 800101a:	f04f 0c07 	movne.w	ip, #7
 800101e:	fa0c f707 	lsl.w	r7, ip, r7
 8001022:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001024:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001026:	4a42      	ldr	r2, [pc, #264]	@ (8001130 <HAL_GPIO_Init+0x1dc>)
 8001028:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102a:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 800102c:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001030:	4e3f      	ldr	r6, [pc, #252]	@ (8001130 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001032:	bf54      	ite	pl
 8001034:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001036:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 800103a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 800103c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800103e:	4e3c      	ldr	r6, [pc, #240]	@ (8001130 <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001040:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8001042:	bf54      	ite	pl
 8001044:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001046:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 800104a:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 800104c:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104e:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001050:	4e37      	ldr	r6, [pc, #220]	@ (8001130 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001052:	bf54      	ite	pl
 8001054:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001056:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 800105a:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105c:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800105e:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001060:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001064:	4932      	ldr	r1, [pc, #200]	@ (8001130 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001066:	bf54      	ite	pl
 8001068:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800106a:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8001070:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	f47f af7e 	bne.w	8000f72 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001076:	b005      	add	sp, #20
 8001078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800107c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001082:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8001086:	fa07 f70c 	lsl.w	r7, r7, ip
 800108a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800108e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001090:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001092:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001096:	f3c1 1700 	ubfx	r7, r1, #4, #1
 800109a:	409f      	lsls	r7, r3
 800109c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80010a0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80010a2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a4:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80010ac:	fa07 f70c 	lsl.w	r7, r7, ip
 80010b0:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80010b6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b8:	f47f af72 	bne.w	8000fa0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 80010bc:	08df      	lsrs	r7, r3, #3
 80010be:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80010c2:	9701      	str	r7, [sp, #4]
 80010c4:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c6:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80010ca:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010cc:	f003 0e07 	and.w	lr, r3, #7
 80010d0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010d4:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d6:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	fa06 fe0e 	lsl.w	lr, r6, lr
 80010de:	9e00      	ldr	r6, [sp, #0]
 80010e0:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010e4:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	6237      	str	r7, [r6, #32]
 80010ec:	e758      	b.n	8000fa0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80010ee:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f0:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80010f8:	fa07 f70c 	lsl.w	r7, r7, ip
 80010fc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001100:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	e74d      	b.n	8000fa0 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	fa0c f707 	lsl.w	r7, ip, r7
 800110c:	433d      	orrs	r5, r7
 800110e:	e789      	b.n	8001024 <HAL_GPIO_Init+0xd0>
 8001110:	f04f 0c02 	mov.w	ip, #2
 8001114:	fa0c f707 	lsl.w	r7, ip, r7
 8001118:	433d      	orrs	r5, r7
 800111a:	e783      	b.n	8001024 <HAL_GPIO_Init+0xd0>
 800111c:	f04f 0c03 	mov.w	ip, #3
 8001120:	fa0c f707 	lsl.w	r7, ip, r7
 8001124:	433d      	orrs	r5, r7
 8001126:	e77d      	b.n	8001024 <HAL_GPIO_Init+0xd0>
 8001128:	40020000 	.word	0x40020000
 800112c:	40020800 	.word	0x40020800
 8001130:	40013c00 	.word	0x40013c00
 8001134:	40023800 	.word	0x40023800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001142:	6951      	ldr	r1, [r2, #20]
 8001144:	4201      	tst	r1, r0
 8001146:	d100      	bne.n	800114a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001148:	4770      	bx	lr
{
 800114a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800114c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800114e:	f7ff f9bb 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001152:	bd08      	pop	{r3, pc}
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001158:	2800      	cmp	r0, #0
 800115a:	f000 81d8 	beq.w	800150e <HAL_RCC_OscConfig+0x3b6>
{
 800115e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	6803      	ldr	r3, [r0, #0]
 8001164:	07dd      	lsls	r5, r3, #31
{
 8001166:	b082      	sub	sp, #8
 8001168:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	d52f      	bpl.n	80011cc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800116c:	499d      	ldr	r1, [pc, #628]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 800116e:	688a      	ldr	r2, [r1, #8]
 8001170:	f002 020c 	and.w	r2, r2, #12
 8001174:	2a04      	cmp	r2, #4
 8001176:	f000 80ec 	beq.w	8001352 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	688a      	ldr	r2, [r1, #8]
 800117c:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001180:	2a08      	cmp	r2, #8
 8001182:	f000 80e2 	beq.w	800134a <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	6863      	ldr	r3, [r4, #4]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800118c:	f000 80eb 	beq.w	8001366 <HAL_RCC_OscConfig+0x20e>
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001194:	f000 8173 	beq.w	800147e <HAL_RCC_OscConfig+0x326>
 8001198:	4d92      	ldr	r5, [pc, #584]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 800119a:	682a      	ldr	r2, [r5, #0]
 800119c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80011a0:	602a      	str	r2, [r5, #0]
 80011a2:	682a      	ldr	r2, [r5, #0]
 80011a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80011a8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 80e0 	bne.w	8001370 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc3e 	bl	8000a30 <HAL_GetTick>
 80011b4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	e005      	b.n	80011c4 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fc3a 	bl	8000a30 <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2864      	cmp	r0, #100	@ 0x64
 80011c0:	f200 8100 	bhi.w	80013c4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	039f      	lsls	r7, r3, #14
 80011c8:	d4f6      	bmi.n	80011b8 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	079d      	lsls	r5, r3, #30
 80011ce:	d528      	bpl.n	8001222 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011d0:	4a84      	ldr	r2, [pc, #528]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 80011d2:	6891      	ldr	r1, [r2, #8]
 80011d4:	f011 0f0c 	tst.w	r1, #12
 80011d8:	f000 809b 	beq.w	8001312 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011dc:	6891      	ldr	r1, [r2, #8]
 80011de:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011e2:	2908      	cmp	r1, #8
 80011e4:	f000 8091 	beq.w	800130a <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011e8:	68e3      	ldr	r3, [r4, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 810c 	beq.w	8001408 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f0:	4b7d      	ldr	r3, [pc, #500]	@ (80013e8 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f2:	4e7c      	ldr	r6, [pc, #496]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc1a 	bl	8000a30 <HAL_GetTick>
 80011fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	e005      	b.n	800120c <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fc16 	bl	8000a30 <HAL_GetTick>
 8001204:	1b40      	subs	r0, r0, r5
 8001206:	2802      	cmp	r0, #2
 8001208:	f200 80dc 	bhi.w	80013c4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	6833      	ldr	r3, [r6, #0]
 800120e:	079f      	lsls	r7, r3, #30
 8001210:	d5f6      	bpl.n	8001200 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	6833      	ldr	r3, [r6, #0]
 8001214:	6922      	ldr	r2, [r4, #16]
 8001216:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800121a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800121e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	071a      	lsls	r2, r3, #28
 8001224:	d45c      	bmi.n	80012e0 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001226:	075d      	lsls	r5, r3, #29
 8001228:	d53a      	bpl.n	80012a0 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122a:	4a6e      	ldr	r2, [pc, #440]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 800122c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800122e:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8001232:	f040 8088 	bne.w	8001346 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001240:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800124a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	4e67      	ldr	r6, [pc, #412]	@ (80013ec <HAL_RCC_OscConfig+0x294>)
 800124e:	6833      	ldr	r3, [r6, #0]
 8001250:	05d8      	lsls	r0, r3, #23
 8001252:	f140 80a7 	bpl.w	80013a4 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001256:	68a3      	ldr	r3, [r4, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	f000 80b7 	beq.w	80013cc <HAL_RCC_OscConfig+0x274>
 800125e:	2b05      	cmp	r3, #5
 8001260:	f000 811d 	beq.w	800149e <HAL_RCC_OscConfig+0x346>
 8001264:	4e5f      	ldr	r6, [pc, #380]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 8001266:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	6732      	str	r2, [r6, #112]	@ 0x70
 800126e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001270:	f022 0204 	bic.w	r2, r2, #4
 8001274:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 80ad 	bne.w	80013d6 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fbd8 	bl	8000a30 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001284:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001286:	e005      	b.n	8001294 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7ff fbd2 	bl	8000a30 <HAL_GetTick>
 800128c:	1bc0      	subs	r0, r0, r7
 800128e:	4540      	cmp	r0, r8
 8001290:	f200 8098 	bhi.w	80013c4 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001296:	079b      	lsls	r3, r3, #30
 8001298:	d4f6      	bmi.n	8001288 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800129a:	2d00      	cmp	r5, #0
 800129c:	f040 80f9 	bne.w	8001492 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a0:	69a3      	ldr	r3, [r4, #24]
 80012a2:	b1cb      	cbz	r3, 80012d8 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012a4:	4d4f      	ldr	r5, [pc, #316]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 80012a6:	68aa      	ldr	r2, [r5, #8]
 80012a8:	f002 020c 	and.w	r2, r2, #12
 80012ac:	2a08      	cmp	r2, #8
 80012ae:	f000 80bc 	beq.w	800142a <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b2:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b4:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <HAL_RCC_OscConfig+0x290>)
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012bc:	f000 80f9 	beq.w	80014b2 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fbb6 	bl	8000a30 <HAL_GetTick>
 80012c4:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c6:	e004      	b.n	80012d2 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fbb2 	bl	8000a30 <HAL_GetTick>
 80012cc:	1b00      	subs	r0, r0, r4
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d878      	bhi.n	80013c4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d2:	682b      	ldr	r3, [r5, #0]
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	d4f7      	bmi.n	80012c8 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80012d8:	2000      	movs	r0, #0
}
 80012da:	b002      	add	sp, #8
 80012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012e0:	6963      	ldr	r3, [r4, #20]
 80012e2:	b1fb      	cbz	r3, 8001324 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 80012e4:	4b40      	ldr	r3, [pc, #256]	@ (80013e8 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4e3f      	ldr	r6, [pc, #252]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 80012e8:	2201      	movs	r2, #1
 80012ea:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb9f 	bl	8000a30 <HAL_GetTick>
 80012f2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f4:	e004      	b.n	8001300 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff fb9b 	bl	8000a30 <HAL_GetTick>
 80012fa:	1b40      	subs	r0, r0, r5
 80012fc:	2802      	cmp	r0, #2
 80012fe:	d861      	bhi.n	80013c4 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001300:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001302:	079b      	lsls	r3, r3, #30
 8001304:	d5f7      	bpl.n	80012f6 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	e78d      	b.n	8001226 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	6852      	ldr	r2, [r2, #4]
 800130c:	0251      	lsls	r1, r2, #9
 800130e:	f53f af6b 	bmi.w	80011e8 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4a34      	ldr	r2, [pc, #208]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	0792      	lsls	r2, r2, #30
 8001318:	d538      	bpl.n	800138c <HAL_RCC_OscConfig+0x234>
 800131a:	68e2      	ldr	r2, [r4, #12]
 800131c:	2a01      	cmp	r2, #1
 800131e:	d035      	beq.n	800138c <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
 8001322:	e7da      	b.n	80012da <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8001324:	4a30      	ldr	r2, [pc, #192]	@ (80013e8 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	4e2f      	ldr	r6, [pc, #188]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8001328:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800132c:	f7ff fb80 	bl	8000a30 <HAL_GetTick>
 8001330:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001332:	e004      	b.n	800133e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fb7c 	bl	8000a30 <HAL_GetTick>
 8001338:	1b40      	subs	r0, r0, r5
 800133a:	2802      	cmp	r0, #2
 800133c:	d842      	bhi.n	80013c4 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001340:	079f      	lsls	r7, r3, #30
 8001342:	d4f7      	bmi.n	8001334 <HAL_RCC_OscConfig+0x1dc>
 8001344:	e7df      	b.n	8001306 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8001346:	2500      	movs	r5, #0
 8001348:	e780      	b.n	800124c <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134a:	684a      	ldr	r2, [r1, #4]
 800134c:	0251      	lsls	r1, r2, #9
 800134e:	f57f af1a 	bpl.w	8001186 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	4a24      	ldr	r2, [pc, #144]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	0392      	lsls	r2, r2, #14
 8001358:	f57f af38 	bpl.w	80011cc <HAL_RCC_OscConfig+0x74>
 800135c:	6862      	ldr	r2, [r4, #4]
 800135e:	2a00      	cmp	r2, #0
 8001360:	f47f af34 	bne.w	80011cc <HAL_RCC_OscConfig+0x74>
 8001364:	e7dc      	b.n	8001320 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	4a1f      	ldr	r2, [pc, #124]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800136e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001370:	f7ff fb5e 	bl	8000a30 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001374:	4e1b      	ldr	r6, [pc, #108]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001376:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001378:	e004      	b.n	8001384 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137a:	f7ff fb59 	bl	8000a30 <HAL_GetTick>
 800137e:	1b40      	subs	r0, r0, r5
 8001380:	2864      	cmp	r0, #100	@ 0x64
 8001382:	d81f      	bhi.n	80013c4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001384:	6833      	ldr	r3, [r6, #0]
 8001386:	039b      	lsls	r3, r3, #14
 8001388:	d5f7      	bpl.n	800137a <HAL_RCC_OscConfig+0x222>
 800138a:	e71e      	b.n	80011ca <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4915      	ldr	r1, [pc, #84]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 800138e:	6920      	ldr	r0, [r4, #16]
 8001390:	680a      	ldr	r2, [r1, #0]
 8001392:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001396:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800139a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139c:	071a      	lsls	r2, r3, #28
 800139e:	f57f af42 	bpl.w	8001226 <HAL_RCC_OscConfig+0xce>
 80013a2:	e79d      	b.n	80012e0 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a4:	6833      	ldr	r3, [r6, #0]
 80013a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013ac:	f7ff fb40 	bl	8000a30 <HAL_GetTick>
 80013b0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b2:	6833      	ldr	r3, [r6, #0]
 80013b4:	05d9      	lsls	r1, r3, #23
 80013b6:	f53f af4e 	bmi.w	8001256 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fb39 	bl	8000a30 <HAL_GetTick>
 80013be:	1bc0      	subs	r0, r0, r7
 80013c0:	2802      	cmp	r0, #2
 80013c2:	d9f6      	bls.n	80013b2 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80013c4:	2003      	movs	r0, #3
}
 80013c6:	b002      	add	sp, #8
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013cc:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
 80013ce:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80013d6:	f7ff fb2b 	bl	8000a30 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013da:	4f02      	ldr	r7, [pc, #8]	@ (80013e4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80013dc:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x2a2>
 80013e4:	40023800 	.word	0x40023800
 80013e8:	42470000 	.word	0x42470000
 80013ec:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f0:	f7ff fb1e 	bl	8000a30 <HAL_GetTick>
 80013f4:	1b80      	subs	r0, r0, r6
 80013f6:	4540      	cmp	r0, r8
 80013f8:	d8e4      	bhi.n	80013c4 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013fc:	079a      	lsls	r2, r3, #30
 80013fe:	d5f7      	bpl.n	80013f0 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8001400:	2d00      	cmp	r5, #0
 8001402:	f43f af4d 	beq.w	80012a0 <HAL_RCC_OscConfig+0x148>
 8001406:	e044      	b.n	8001492 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8001408:	4a42      	ldr	r2, [pc, #264]	@ (8001514 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4e43      	ldr	r6, [pc, #268]	@ (8001518 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 800140c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800140e:	f7ff fb0f 	bl	8000a30 <HAL_GetTick>
 8001412:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001414:	e004      	b.n	8001420 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fb0b 	bl	8000a30 <HAL_GetTick>
 800141a:	1b40      	subs	r0, r0, r5
 800141c:	2802      	cmp	r0, #2
 800141e:	d8d1      	bhi.n	80013c4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001420:	6833      	ldr	r3, [r6, #0]
 8001422:	0799      	lsls	r1, r3, #30
 8001424:	d4f7      	bmi.n	8001416 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	e6fb      	b.n	8001222 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142a:	2b01      	cmp	r3, #1
 800142c:	f43f af78 	beq.w	8001320 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8001430:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001432:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001434:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001438:	4291      	cmp	r1, r2
 800143a:	f47f af71 	bne.w	8001320 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001440:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001444:	4291      	cmp	r1, r2
 8001446:	f47f af6b 	bne.w	8001320 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800144a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800144c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001450:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001452:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001456:	f47f af63 	bne.w	8001320 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800145a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800145c:	0852      	lsrs	r2, r2, #1
 800145e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001462:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001464:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001468:	f47f af5a 	bne.w	8001320 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800146c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800146e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001472:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001476:	bf14      	ite	ne
 8001478:	2001      	movne	r0, #1
 800147a:	2000      	moveq	r0, #0
 800147c:	e72d      	b.n	80012da <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147e:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <HAL_RCC_OscConfig+0x3c0>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800148e:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001490:	e76e      	b.n	8001370 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001492:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <HAL_RCC_OscConfig+0x3c0>)
 8001494:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	@ 0x40
 800149c:	e700      	b.n	80012a0 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <HAL_RCC_OscConfig+0x3c0>)
 80014a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80014a2:	f042 0204 	orr.w	r2, r2, #4
 80014a6:	671a      	str	r2, [r3, #112]	@ 0x70
 80014a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b0:	e791      	b.n	80013d6 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80014b2:	f7ff fabd 	bl	8000a30 <HAL_GetTick>
 80014b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	e005      	b.n	80014c6 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fab9 	bl	8000a30 <HAL_GetTick>
 80014be:	1b80      	subs	r0, r0, r6
 80014c0:	2802      	cmp	r0, #2
 80014c2:	f63f af7f 	bhi.w	80013c4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	0199      	lsls	r1, r3, #6
 80014ca:	d4f6      	bmi.n	80014ba <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014cc:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80014d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80014d2:	430b      	orrs	r3, r1
 80014d4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014d8:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 80014dc:	0852      	lsrs	r2, r2, #1
 80014de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80014e2:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80014e4:	490b      	ldr	r1, [pc, #44]	@ (8001514 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80014ea:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014ee:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80014f0:	f7ff fa9e 	bl	8000a30 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f4:	4d08      	ldr	r5, [pc, #32]	@ (8001518 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 80014f6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f8:	e005      	b.n	8001506 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff fa99 	bl	8000a30 <HAL_GetTick>
 80014fe:	1b00      	subs	r0, r0, r4
 8001500:	2802      	cmp	r0, #2
 8001502:	f63f af5f 	bhi.w	80013c4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	019a      	lsls	r2, r3, #6
 800150a:	d5f6      	bpl.n	80014fa <HAL_RCC_OscConfig+0x3a2>
 800150c:	e6e4      	b.n	80012d8 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 800150e:	2001      	movs	r0, #1
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	42470000 	.word	0x42470000
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151c:	4916      	ldr	r1, [pc, #88]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800151e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001520:	688b      	ldr	r3, [r1, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b04      	cmp	r3, #4
 8001528:	d01b      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0x46>
 800152a:	2b08      	cmp	r3, #8
 800152c:	d117      	bne.n	800155e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001530:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001532:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001534:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001538:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800153c:	d113      	bne.n	8001566 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800153e:	480f      	ldr	r0, [pc, #60]	@ (800157c <HAL_RCC_GetSysClockFreq+0x60>)
 8001540:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001544:	fba1 0100 	umull	r0, r1, r1, r0
 8001548:	f7fe fe46 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x5c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001554:	3301      	adds	r3, #1
 8001556:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001558:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800155c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001560:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001562:	4807      	ldr	r0, [pc, #28]	@ (8001580 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001564:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001566:	4806      	ldr	r0, [pc, #24]	@ (8001580 <HAL_RCC_GetSysClockFreq+0x64>)
 8001568:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800156c:	2300      	movs	r3, #0
 800156e:	fba1 0100 	umull	r0, r1, r1, r0
 8001572:	f7fe fe31 	bl	80001d8 <__aeabi_uldivmod>
 8001576:	e7e9      	b.n	800154c <HAL_RCC_GetSysClockFreq+0x30>
 8001578:	40023800 	.word	0x40023800
 800157c:	00f42400 	.word	0x00f42400
 8001580:	017d7840 	.word	0x017d7840

08001584 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001584:	2800      	cmp	r0, #0
 8001586:	f000 8087 	beq.w	8001698 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800158a:	4a48      	ldr	r2, [pc, #288]	@ (80016ac <HAL_RCC_ClockConfig+0x128>)
 800158c:	6813      	ldr	r3, [r2, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	428b      	cmp	r3, r1
{
 8001594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001598:	460d      	mov	r5, r1
 800159a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	d209      	bcs.n	80015b2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	b2cb      	uxtb	r3, r1
 80015a0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	428b      	cmp	r3, r1
 80015aa:	d002      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
}
 80015ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	0798      	lsls	r0, r3, #30
 80015b6:	d514      	bpl.n	80015e2 <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	0759      	lsls	r1, r3, #29
 80015ba:	d504      	bpl.n	80015c6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	493c      	ldr	r1, [pc, #240]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 80015be:	688a      	ldr	r2, [r1, #8]
 80015c0:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80015c4:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c6:	071a      	lsls	r2, r3, #28
 80015c8:	d504      	bpl.n	80015d4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ca:	4939      	ldr	r1, [pc, #228]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 80015cc:	688a      	ldr	r2, [r1, #8]
 80015ce:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80015d2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4936      	ldr	r1, [pc, #216]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 80015d6:	68a0      	ldr	r0, [r4, #8]
 80015d8:	688a      	ldr	r2, [r1, #8]
 80015da:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80015de:	4302      	orrs	r2, r0
 80015e0:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	07df      	lsls	r7, r3, #31
 80015e4:	d521      	bpl.n	800162a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	6862      	ldr	r2, [r4, #4]
 80015e8:	2a01      	cmp	r2, #1
 80015ea:	d057      	beq.n	800169c <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ec:	1e93      	subs	r3, r2, #2
 80015ee:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f4:	d94d      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	0799      	lsls	r1, r3, #30
 80015f8:	d5d8      	bpl.n	80015ac <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4e2d      	ldr	r6, [pc, #180]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 80015fc:	68b3      	ldr	r3, [r6, #8]
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	4313      	orrs	r3, r2
 8001604:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001606:	f7ff fa13 	bl	8000a30 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800160e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001610:	e004      	b.n	800161c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001612:	f7ff fa0d 	bl	8000a30 <HAL_GetTick>
 8001616:	1bc0      	subs	r0, r0, r7
 8001618:	4540      	cmp	r0, r8
 800161a:	d844      	bhi.n	80016a6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161c:	68b3      	ldr	r3, [r6, #8]
 800161e:	6862      	ldr	r2, [r4, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001628:	d1f3      	bne.n	8001612 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800162a:	4a20      	ldr	r2, [pc, #128]	@ (80016ac <HAL_RCC_ClockConfig+0x128>)
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	42ab      	cmp	r3, r5
 8001634:	d906      	bls.n	8001644 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	b2eb      	uxtb	r3, r5
 8001638:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	6813      	ldr	r3, [r2, #0]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	42ab      	cmp	r3, r5
 8001642:	d1b3      	bne.n	80015ac <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	075a      	lsls	r2, r3, #29
 8001648:	d506      	bpl.n	8001658 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164a:	4919      	ldr	r1, [pc, #100]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 800164c:	68e0      	ldr	r0, [r4, #12]
 800164e:	688a      	ldr	r2, [r1, #8]
 8001650:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8001654:	4302      	orrs	r2, r0
 8001656:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001658:	071b      	lsls	r3, r3, #28
 800165a:	d507      	bpl.n	800166c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 800165e:	6921      	ldr	r1, [r4, #16]
 8001660:	6893      	ldr	r3, [r2, #8]
 8001662:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001666:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800166a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166c:	f7ff ff56 	bl	800151c <HAL_RCC_GetSysClockFreq>
 8001670:	4a0f      	ldr	r2, [pc, #60]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 8001672:	4c10      	ldr	r4, [pc, #64]	@ (80016b4 <HAL_RCC_ClockConfig+0x130>)
 8001674:	6892      	ldr	r2, [r2, #8]
 8001676:	4910      	ldr	r1, [pc, #64]	@ (80016b8 <HAL_RCC_ClockConfig+0x134>)
 8001678:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800167c:	4603      	mov	r3, r0
 800167e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8001680:	480e      	ldr	r0, [pc, #56]	@ (80016bc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001682:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8001684:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001686:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001688:	f7ff f988 	bl	800099c <HAL_InitTick>
  return HAL_OK;
 800168c:	2000      	movs	r0, #0
}
 800168e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	0198      	lsls	r0, r3, #6
 8001694:	d4b1      	bmi.n	80015fa <HAL_RCC_ClockConfig+0x76>
 8001696:	e789      	b.n	80015ac <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001698:	2001      	movs	r0, #1
}
 800169a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <HAL_RCC_ClockConfig+0x12c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	039e      	lsls	r6, r3, #14
 80016a2:	d4aa      	bmi.n	80015fa <HAL_RCC_ClockConfig+0x76>
 80016a4:	e782      	b.n	80015ac <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80016a6:	2003      	movs	r0, #3
 80016a8:	e781      	b.n	80015ae <HAL_RCC_ClockConfig+0x2a>
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00
 80016b0:	40023800 	.word	0x40023800
 80016b4:	0800217c 	.word	0x0800217c
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008

080016c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80016c2:	4905      	ldr	r1, [pc, #20]	@ (80016d8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016c8:	6808      	ldr	r0, [r1, #0]
 80016ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80016d0:	40d8      	lsrs	r0, r3
 80016d2:	4770      	bx	lr
 80016d4:	40023800 	.word	0x40023800
 80016d8:	20000000 	.word	0x20000000
 80016dc:	08002174 	.word	0x08002174

080016e0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80016e2:	4905      	ldr	r1, [pc, #20]	@ (80016f8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016e8:	6808      	ldr	r0, [r1, #0]
 80016ea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80016f0:	40d8      	lsrs	r0, r3
 80016f2:	4770      	bx	lr
 80016f4:	40023800 	.word	0x40023800
 80016f8:	20000000 	.word	0x20000000
 80016fc:	08002174 	.word	0x08002174

08001700 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001700:	2800      	cmp	r0, #0
 8001702:	d071      	beq.n	80017e8 <HAL_TIM_Base_Init+0xe8>
{
 8001704:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001706:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800170a:	4604      	mov	r4, r0
 800170c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001710:	2b00      	cmp	r3, #0
 8001712:	d054      	beq.n	80017be <HAL_TIM_Base_Init+0xbe>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001714:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001716:	4e35      	ldr	r6, [pc, #212]	@ (80017ec <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001718:	6860      	ldr	r0, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800171a:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800171c:	69a1      	ldr	r1, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 800171e:	2302      	movs	r3, #2
 8001720:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001724:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8001726:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001728:	d04e      	beq.n	80017c8 <HAL_TIM_Base_Init+0xc8>
 800172a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800172e:	d01c      	beq.n	800176a <HAL_TIM_Base_Init+0x6a>
 8001730:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8001734:	42b2      	cmp	r2, r6
 8001736:	d018      	beq.n	800176a <HAL_TIM_Base_Init+0x6a>
 8001738:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800173c:	42b2      	cmp	r2, r6
 800173e:	d014      	beq.n	800176a <HAL_TIM_Base_Init+0x6a>
 8001740:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001744:	42b2      	cmp	r2, r6
 8001746:	d010      	beq.n	800176a <HAL_TIM_Base_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001748:	4e29      	ldr	r6, [pc, #164]	@ (80017f0 <HAL_TIM_Base_Init+0xf0>)
 800174a:	42b2      	cmp	r2, r6
 800174c:	d011      	beq.n	8001772 <HAL_TIM_Base_Init+0x72>
 800174e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001752:	42b2      	cmp	r2, r6
 8001754:	d00d      	beq.n	8001772 <HAL_TIM_Base_Init+0x72>
 8001756:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800175a:	42b2      	cmp	r2, r6
 800175c:	d009      	beq.n	8001772 <HAL_TIM_Base_Init+0x72>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800175e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001762:	62d5      	str	r5, [r2, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001764:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 8001766:	6290      	str	r0, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001768:	e00c      	b.n	8001784 <HAL_TIM_Base_Init+0x84>
    tmpcr1 |= Structure->CounterMode;
 800176a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800176c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001770:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001772:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001774:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8001776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800177a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800177c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001780:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 8001782:	6290      	str	r0, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001784:	6810      	ldr	r0, [r2, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001786:	2301      	movs	r3, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001788:	f040 0004 	orr.w	r0, r0, #4
 800178c:	6010      	str	r0, [r2, #0]
  TIMx->EGR = TIM_EGR_UG;
 800178e:	6153      	str	r3, [r2, #20]

  TIMx->CR1 = tmpcr1;
 8001790:	6011      	str	r1, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001792:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001796:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800179a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800179e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80017a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80017aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80017b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80017b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80017ba:	2000      	movs	r0, #0
}
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80017be:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017c2:	f7ff f821 	bl	8000808 <HAL_TIM_Base_MspInit>
 80017c6:	e7a5      	b.n	8001714 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80017c8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80017ce:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d0:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d2:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  TIMx->PSC = Structure->Prescaler;
 80017d8:	6290      	str	r0, [r2, #40]	@ 0x28
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017da:	4333      	orrs	r3, r6
    TIMx->RCR = Structure->RepetitionCounter;
 80017dc:	6960      	ldr	r0, [r4, #20]
 80017de:	6310      	str	r0, [r2, #48]	@ 0x30
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017e4:	4319      	orrs	r1, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80017e6:	e7cd      	b.n	8001784 <HAL_TIM_Base_Init+0x84>
    return HAL_ERROR;
 80017e8:	2001      	movs	r0, #1
}
 80017ea:	4770      	bx	lr
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40014000 	.word	0x40014000

080017f4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80017f4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d124      	bne.n	8001846 <HAL_TIM_Base_Start+0x52>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017fc:	6803      	ldr	r3, [r0, #0]
 80017fe:	4a13      	ldr	r2, [pc, #76]	@ (800184c <HAL_TIM_Base_Start+0x58>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001800:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001802:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8001804:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001808:	d012      	beq.n	8001830 <HAL_TIM_Base_Start+0x3c>
 800180a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800180e:	d00f      	beq.n	8001830 <HAL_TIM_Base_Start+0x3c>
 8001810:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001814:	4293      	cmp	r3, r2
 8001816:	d00b      	beq.n	8001830 <HAL_TIM_Base_Start+0x3c>
 8001818:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <HAL_TIM_Base_Start+0x3c>
 8001820:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001824:	4293      	cmp	r3, r2
 8001826:	d003      	beq.n	8001830 <HAL_TIM_Base_Start+0x3c>
 8001828:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800182c:	4293      	cmp	r3, r2
 800182e:	d104      	bne.n	800183a <HAL_TIM_Base_Start+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001836:	2a06      	cmp	r2, #6
 8001838:	d003      	beq.n	8001842 <HAL_TIM_Base_Start+0x4e>
      __HAL_TIM_ENABLE(htim);
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001842:	2000      	movs	r0, #0
 8001844:	4770      	bx	lr
    return HAL_ERROR;
 8001846:	2001      	movs	r0, #1
}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40010000 	.word	0x40010000

08001850 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8001850:	6803      	ldr	r3, [r0, #0]
 8001852:	6a19      	ldr	r1, [r3, #32]
 8001854:	f241 1211 	movw	r2, #4369	@ 0x1111
 8001858:	4211      	tst	r1, r2
 800185a:	d108      	bne.n	800186e <HAL_TIM_Base_Stop+0x1e>
 800185c:	6a19      	ldr	r1, [r3, #32]
 800185e:	f240 4244 	movw	r2, #1092	@ 0x444
 8001862:	4211      	tst	r1, r2
 8001864:	d103      	bne.n	800186e <HAL_TIM_Base_Stop+0x1e>
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800186e:	2301      	movs	r3, #1
 8001870:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 8001874:	2000      	movs	r0, #0
 8001876:	4770      	bx	lr

08001878 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8001878:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800187c:	2a01      	cmp	r2, #1
 800187e:	d050      	beq.n	8001922 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8001880:	4603      	mov	r3, r0
{
 8001882:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001884:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001886:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800188c:	2001      	movs	r0, #1
 800188e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001892:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001894:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001896:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001898:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800189c:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800189e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80018a2:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80018a4:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 80018a6:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80018a8:	d060      	beq.n	800196c <HAL_TIM_SlaveConfigSynchro+0xf4>
 80018aa:	d90f      	bls.n	80018cc <HAL_TIM_SlaveConfigSynchro+0x54>
 80018ac:	2860      	cmp	r0, #96	@ 0x60
 80018ae:	d03a      	beq.n	8001926 <HAL_TIM_SlaveConfigSynchro+0xae>
 80018b0:	2870      	cmp	r0, #112	@ 0x70
 80018b2:	d10e      	bne.n	80018d2 <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018b4:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80018b8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018ba:	432a      	orrs	r2, r5
 80018bc:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018be:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80018c6:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018c8:	60a2      	str	r2, [r4, #8]
 80018ca:	e00f      	b.n	80018ec <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 80018cc:	2840      	cmp	r0, #64	@ 0x40
 80018ce:	d03d      	beq.n	800194c <HAL_TIM_SlaveConfigSynchro+0xd4>
 80018d0:	d907      	bls.n	80018e2 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 80018d2:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80018d4:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80018d6:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80018de:	bc30      	pop	{r4, r5}
 80018e0:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80018e2:	2820      	cmp	r0, #32
 80018e4:	d002      	beq.n	80018ec <HAL_TIM_SlaveConfigSynchro+0x74>
 80018e6:	d912      	bls.n	800190e <HAL_TIM_SlaveConfigSynchro+0x96>
 80018e8:	2830      	cmp	r0, #48	@ 0x30
 80018ea:	d1f2      	bne.n	80018d2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80018ec:	68e2      	ldr	r2, [r4, #12]
 80018ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018f2:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80018f4:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 80018f6:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80018f8:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80018fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80018fe:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001900:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001904:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 8001908:	4608      	mov	r0, r1
}
 800190a:	bc30      	pop	{r4, r5}
 800190c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800190e:	f030 0210 	bics.w	r2, r0, #16
 8001912:	d0eb      	beq.n	80018ec <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8001914:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8001916:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8001918:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001920:	e7dd      	b.n	80018de <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8001922:	2002      	movs	r0, #2
}
 8001924:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8001926:	6a22      	ldr	r2, [r4, #32]
                               sSlaveConfig->TriggerPolarity,
 8001928:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 800192a:	6908      	ldr	r0, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800192c:	6a21      	ldr	r1, [r4, #32]
 800192e:	f021 0110 	bic.w	r1, r1, #16
 8001932:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001934:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001936:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800193a:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800193e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001942:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001946:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8001948:	6222      	str	r2, [r4, #32]
 800194a:	e7cf      	b.n	80018ec <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800194c:	2d05      	cmp	r5, #5
 800194e:	d0c0      	beq.n	80018d2 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8001950:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001952:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001954:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800195c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800195e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001962:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001966:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8001968:	6220      	str	r0, [r4, #32]
      break;
 800196a:	e7bf      	b.n	80018ec <HAL_TIM_SlaveConfigSynchro+0x74>
                               sSlaveConfig->TriggerPolarity,
 800196c:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 800196e:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 8001970:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001972:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001976:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001978:	6a22      	ldr	r2, [r4, #32]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001980:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001982:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001986:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800198a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800198c:	6221      	str	r1, [r4, #32]
 800198e:	e7ad      	b.n	80018ec <HAL_TIM_SlaveConfigSynchro+0x74>

08001990 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001990:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001994:	2a01      	cmp	r2, #1
 8001996:	d02f      	beq.n	80019f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001998:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800199a:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800199c:	2002      	movs	r0, #2
{
 800199e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80019a4:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019a6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80019a8:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80019aa:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019ae:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019b0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b2:	4812      	ldr	r0, [pc, #72]	@ (80019fc <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80019b4:	4282      	cmp	r2, r0
 80019b6:	d012      	beq.n	80019de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80019b8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80019bc:	d00f      	beq.n	80019de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80019be:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80019c2:	4282      	cmp	r2, r0
 80019c4:	d00b      	beq.n	80019de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80019c6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80019ca:	4282      	cmp	r2, r0
 80019cc:	d007      	beq.n	80019de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80019ce:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80019d2:	4282      	cmp	r2, r0
 80019d4:	d003      	beq.n	80019de <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80019d6:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80019da:	4282      	cmp	r2, r0
 80019dc:	d104      	bne.n	80019e8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019de:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019e0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019e4:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80019e6:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80019e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80019f0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80019f4:	bc30      	pop	{r4, r5}
 80019f6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80019f8:	2002      	movs	r0, #2
}
 80019fa:	4770      	bx	lr
 80019fc:	40010000 	.word	0x40010000

08001a00 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a00:	2800      	cmp	r0, #0
 8001a02:	f000 8087 	beq.w	8001b14 <HAL_UART_Init+0x114>
{
 8001a06:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a08:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d079      	beq.n	8001b0a <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a16:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a18:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a1a:	2224      	movs	r2, #36	@ 0x24
 8001a1c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a26:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a28:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a2a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a2c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8001a30:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a32:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a34:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a36:	4302      	orrs	r2, r0
 8001a38:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001a3a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a3c:	4302      	orrs	r2, r0
 8001a3e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001a40:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8001a44:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a48:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a52:	4931      	ldr	r1, [pc, #196]	@ (8001b18 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a54:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001a58:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a5a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a5c:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a5e:	d036      	beq.n	8001ace <HAL_UART_Init+0xce>
 8001a60:	4a2e      	ldr	r2, [pc, #184]	@ (8001b1c <HAL_UART_Init+0x11c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d033      	beq.n	8001ace <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a66:	f7ff fe2b 	bl	80016c0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a6a:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a6c:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a6e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a72:	e9d4 5300 	ldrd	r5, r3, [r4]
 8001a76:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a7a:	d02b      	beq.n	8001ad4 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a7c:	009a      	lsls	r2, r3, #2
 8001a7e:	0f9b      	lsrs	r3, r3, #30
 8001a80:	f7fe fbaa 	bl	80001d8 <__aeabi_uldivmod>
 8001a84:	4a26      	ldr	r2, [pc, #152]	@ (8001b20 <HAL_UART_Init+0x120>)
 8001a86:	fba2 1300 	umull	r1, r3, r2, r0
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2164      	movs	r1, #100	@ 0x64
 8001a8e:	fb01 0013 	mls	r0, r1, r3, r0
 8001a92:	0100      	lsls	r0, r0, #4
 8001a94:	3032      	adds	r0, #50	@ 0x32
 8001a96:	fba2 2000 	umull	r2, r0, r2, r0
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8001aa0:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aa2:	692a      	ldr	r2, [r5, #16]
 8001aa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001aa8:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aaa:	696a      	ldr	r2, [r5, #20]
 8001aac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ab0:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8001ab2:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8001ab6:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8001ab8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001abc:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001abe:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ac0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ac4:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8001ac8:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aca:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8001acc:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ace:	f7ff fe07 	bl	80016e0 <HAL_RCC_GetPCLK2Freq>
 8001ad2:	e7ca      	b.n	8001a6a <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ad4:	18da      	adds	r2, r3, r3
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	415b      	adcs	r3, r3
 8001adc:	f7fe fb7c 	bl	80001d8 <__aeabi_uldivmod>
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <HAL_UART_Init+0x120>)
 8001ae2:	fba2 3100 	umull	r3, r1, r2, r0
 8001ae6:	0949      	lsrs	r1, r1, #5
 8001ae8:	2364      	movs	r3, #100	@ 0x64
 8001aea:	fb03 0311 	mls	r3, r3, r1, r0
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	3332      	adds	r3, #50	@ 0x32
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001b00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001b04:	4413      	add	r3, r2
 8001b06:	60ab      	str	r3, [r5, #8]
 8001b08:	e7cb      	b.n	8001aa2 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8001b0a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001b0e:	f7fe fe91 	bl	8000834 <HAL_UART_MspInit>
 8001b12:	e780      	b.n	8001a16 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8001b14:	2001      	movs	r0, #1
}
 8001b16:	4770      	bx	lr
 8001b18:	40011000 	.word	0x40011000
 8001b1c:	40011400 	.word	0x40011400
 8001b20:	51eb851f 	.word	0x51eb851f

08001b24 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001b24:	f890 c041 	ldrb.w	ip, [r0, #65]	@ 0x41
 8001b28:	f1bc 0f20 	cmp.w	ip, #32
 8001b2c:	d134      	bne.n	8001b98 <HAL_UART_Transmit_DMA+0x74>
{
 8001b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b32:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8001b34:	b101      	cbz	r1, 8001b38 <HAL_UART_Transmit_DMA+0x14>
 8001b36:	b912      	cbnz	r2, 8001b3e <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 8001b38:	2001      	movs	r0, #1
}
 8001b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    huart->TxXferCount = Size;
 8001b3e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    huart->TxXferSize = Size;
 8001b40:	84a2      	strh	r2, [r4, #36]	@ 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001b42:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001b44:	f8df e064 	ldr.w	lr, [pc, #100]	@ 8001bac <HAL_UART_Transmit_DMA+0x88>
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001b48:	4f17      	ldr	r7, [pc, #92]	@ (8001ba8 <HAL_UART_Transmit_DMA+0x84>)
    huart->pTxBuffPtr = pData;
 8001b4a:	6221      	str	r1, [r4, #32]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4c:	fa5f f58c 	uxtb.w	r5, ip
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8001b50:	4613      	mov	r3, r2
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001b52:	f8df c05c 	ldr.w	ip, [pc, #92]	@ 8001bb0 <HAL_UART_Transmit_DMA+0x8c>
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8001b56:	6822      	ldr	r2, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b58:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b5a:	f04f 0821 	mov.w	r8, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	6466      	str	r6, [r4, #68]	@ 0x44
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8001b60:	3204      	adds	r2, #4
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b62:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001b66:	e9c0 ec0f 	strd	lr, ip, [r0, #60]	@ 0x3c
    huart->hdmatx->XferAbortCallback = NULL;
 8001b6a:	e9c0 7613 	strd	r7, r6, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8001b6e:	f7ff f883 	bl	8000c78 <HAL_DMA_Start_IT>
 8001b72:	b998      	cbnz	r0, 8001b9c <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001b74:	6822      	ldr	r2, [r4, #0]
 8001b76:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8001b7a:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b7c:	f102 0314 	add.w	r3, r2, #20
 8001b80:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b88:	f102 0414 	add.w	r4, r2, #20
 8001b8c:	e844 3100 	strex	r1, r3, [r4]
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d1f3      	bne.n	8001b7c <HAL_UART_Transmit_DMA+0x58>
}
 8001b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001b98:	2002      	movs	r0, #2
}
 8001b9a:	4770      	bx	lr
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	6463      	str	r3, [r4, #68]	@ 0x44
      huart->gState = HAL_UART_STATE_READY;
 8001ba0:	f884 5041 	strb.w	r5, [r4, #65]	@ 0x41
      return HAL_ERROR;
 8001ba4:	e7c8      	b.n	8001b38 <HAL_UART_Transmit_DMA+0x14>
 8001ba6:	bf00      	nop
 8001ba8:	08001c19 	.word	0x08001c19
 8001bac:	08001bb5 	.word	0x08001bb5
 8001bb0:	08001c05 	.word	0x08001c05

08001bb4 <UART_DMATransmitCplt>:
{
 8001bb4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001bb6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bb8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8001bc0:	d11a      	bne.n	8001bf8 <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 8001bc2:	6802      	ldr	r2, [r0, #0]
 8001bc4:	84c3      	strh	r3, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc6:	f102 0314 	add.w	r3, r2, #20
 8001bca:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd2:	f102 0014 	add.w	r0, r2, #20
 8001bd6:	e840 3100 	strex	r1, r3, [r0]
 8001bda:	2900      	cmp	r1, #0
 8001bdc:	d1f3      	bne.n	8001bc6 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bde:	f102 030c 	add.w	r3, r2, #12
 8001be2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bea:	f102 000c 	add.w	r0, r2, #12
 8001bee:	e840 3100 	strex	r1, r3, [r0]
 8001bf2:	2900      	cmp	r1, #0
 8001bf4:	d1f3      	bne.n	8001bde <UART_DMATransmitCplt+0x2a>
}
 8001bf6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001bf8:	f7fe fdd8 	bl	80007ac <HAL_UART_TxCpltCallback>
}
 8001bfc:	bd08      	pop	{r3, pc}
 8001bfe:	bf00      	nop

08001c00 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <UART_DMATxHalfCplt>:
{
 8001c04:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8001c06:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001c08:	f7ff fffa 	bl	8001c00 <HAL_UART_TxHalfCpltCallback>
}
 8001c0c:	bd08      	pop	{r3, pc}
 8001c0e:	bf00      	nop

08001c10 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop

08001c14 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <UART_DMAError>:
{
 8001c18:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c1a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001c1c:	6803      	ldr	r3, [r0, #0]
 8001c1e:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001c20:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001c24:	2a21      	cmp	r2, #33	@ 0x21
 8001c26:	d00b      	beq.n	8001c40 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c28:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001c2a:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 8001c2e:	2a22      	cmp	r2, #34	@ 0x22
 8001c30:	d01e      	beq.n	8001c70 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001c32:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8001c3a:	f7ff ffeb 	bl	8001c14 <HAL_UART_ErrorCallback>
}
 8001c3e:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001c40:	0609      	lsls	r1, r1, #24
 8001c42:	d5f1      	bpl.n	8001c28 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8001c44:	2200      	movs	r2, #0
 8001c46:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c48:	f103 020c 	add.w	r2, r3, #12
 8001c4c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001c50:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c54:	f103 0c0c 	add.w	ip, r3, #12
 8001c58:	e84c 2100 	strex	r1, r2, [ip]
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	d1f3      	bne.n	8001c48 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8001c60:	2220      	movs	r2, #32
 8001c62:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c66:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001c68:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 8001c6c:	2a22      	cmp	r2, #34	@ 0x22
 8001c6e:	d1e0      	bne.n	8001c32 <UART_DMAError+0x1a>
 8001c70:	064a      	lsls	r2, r1, #25
 8001c72:	d5de      	bpl.n	8001c32 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8001c74:	2200      	movs	r2, #0
 8001c76:	85c2      	strh	r2, [r0, #46]	@ 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c78:	f103 020c 	add.w	r2, r3, #12
 8001c7c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c80:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c84:	f103 0c0c 	add.w	ip, r3, #12
 8001c88:	e84c 2100 	strex	r1, r2, [ip]
 8001c8c:	2900      	cmp	r1, #0
 8001c8e:	d1f3      	bne.n	8001c78 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c90:	f103 0214 	add.w	r2, r3, #20
 8001c94:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c98:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c9c:	f103 0c14 	add.w	ip, r3, #20
 8001ca0:	e84c 2100 	strex	r1, r2, [ip]
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	d1f3      	bne.n	8001c90 <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ca8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8001caa:	2a01      	cmp	r2, #1
 8001cac:	d005      	beq.n	8001cba <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 8001cae:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cb0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001cb2:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cb6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001cb8:	e7bb      	b.n	8001c32 <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cba:	f103 020c 	add.w	r2, r3, #12
 8001cbe:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cc2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc6:	f103 0c0c 	add.w	ip, r3, #12
 8001cca:	e84c 2100 	strex	r1, r2, [ip]
 8001cce:	2900      	cmp	r1, #0
 8001cd0:	d1f3      	bne.n	8001cba <UART_DMAError+0xa2>
 8001cd2:	e7ec      	b.n	8001cae <UART_DMAError+0x96>

08001cd4 <UART_DMAAbortOnError>:
{
 8001cd4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  HAL_UART_ErrorCallback(huart);
 8001cdc:	f7ff ff9a 	bl	8001c14 <HAL_UART_ErrorCallback>
}
 8001ce0:	bd08      	pop	{r3, pc}
 8001ce2:	bf00      	nop

08001ce4 <HAL_UARTEx_RxEventCallback>:
}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ce8:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001cea:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001cec:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cf2:	d042      	beq.n	8001d7a <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d039      	beq.n	8001d6c <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cf8:	684b      	ldr	r3, [r1, #4]
 8001cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cfe:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001d00:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001d02:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8001d04:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8001d06:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d132      	bne.n	8001d78 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d12:	6802      	ldr	r2, [r0, #0]
 8001d14:	68d1      	ldr	r1, [r2, #12]
 8001d16:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001d1a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d1c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d1e:	68d1      	ldr	r1, [r2, #12]
 8001d20:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8001d24:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d26:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001d28:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d2c:	f021 0101 	bic.w	r1, r1, #1
 8001d30:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001d32:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d36:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d38:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8001d3a:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001d3c:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d3e:	d125      	bne.n	8001d8c <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d40:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d42:	f102 030c 	add.w	r3, r2, #12
 8001d46:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d4a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4e:	f102 0c0c 	add.w	ip, r2, #12
 8001d52:	e84c 3100 	strex	r1, r3, [ip]
 8001d56:	2900      	cmp	r1, #0
 8001d58:	d1f3      	bne.n	8001d42 <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001d5a:	6813      	ldr	r3, [r2, #0]
 8001d5c:	06db      	lsls	r3, r3, #27
 8001d5e:	d41a      	bmi.n	8001d96 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001d60:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8001d62:	f7ff ffbf 	bl	8001ce4 <HAL_UARTEx_RxEventCallback>
}
 8001d66:	b003      	add	sp, #12
 8001d68:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d6c:	6903      	ldr	r3, [r0, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1c2      	bne.n	8001cf8 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d72:	684b      	ldr	r3, [r1, #4]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e7c2      	b.n	8001cfe <UART_Receive_IT.part.0.isra.0+0x16>
 8001d78:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d7a:	6903      	ldr	r3, [r0, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f8      	bne.n	8001d72 <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d80:	684b      	ldr	r3, [r1, #4]
 8001d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d86:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8001d8a:	e7bb      	b.n	8001d04 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8001d8c:	f7ff ff40 	bl	8001c10 <HAL_UART_RxCpltCallback>
}
 8001d90:	b003      	add	sp, #12
 8001d92:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d96:	2300      	movs	r3, #0
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	6813      	ldr	r3, [r2, #0]
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	6853      	ldr	r3, [r2, #4]
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	9b01      	ldr	r3, [sp, #4]
 8001da4:	e7dc      	b.n	8001d60 <UART_Receive_IT.part.0.isra.0+0x78>
 8001da6:	bf00      	nop

08001da8 <HAL_UART_IRQHandler>:
{
 8001da8:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dae:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001db0:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8001db2:	f012 0f0f 	tst.w	r2, #15
{
 8001db6:	b083      	sub	sp, #12
 8001db8:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001dba:	d172      	bne.n	8001ea2 <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dbc:	0691      	lsls	r1, r2, #26
 8001dbe:	d502      	bpl.n	8001dc6 <HAL_UART_IRQHandler+0x1e>
 8001dc0:	06a9      	lsls	r1, r5, #26
 8001dc2:	f100 80a3 	bmi.w	8001f0c <HAL_UART_IRQHandler+0x164>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dc6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001dc8:	2901      	cmp	r1, #1
 8001dca:	d00b      	beq.n	8001de4 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dcc:	0610      	lsls	r0, r2, #24
 8001dce:	d502      	bpl.n	8001dd6 <HAL_UART_IRQHandler+0x2e>
 8001dd0:	0629      	lsls	r1, r5, #24
 8001dd2:	f100 80a5 	bmi.w	8001f20 <HAL_UART_IRQHandler+0x178>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001dd6:	0652      	lsls	r2, r2, #25
 8001dd8:	d502      	bpl.n	8001de0 <HAL_UART_IRQHandler+0x38>
 8001dda:	0668      	lsls	r0, r5, #25
 8001ddc:	f100 80bf 	bmi.w	8001f5e <HAL_UART_IRQHandler+0x1b6>
}
 8001de0:	b003      	add	sp, #12
 8001de2:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001de4:	06d0      	lsls	r0, r2, #27
 8001de6:	d5f1      	bpl.n	8001dcc <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8001de8:	06e9      	lsls	r1, r5, #27
 8001dea:	d5ef      	bpl.n	8001dcc <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dec:	2200      	movs	r2, #0
 8001dee:	9201      	str	r2, [sp, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	9201      	str	r2, [sp, #4]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	9201      	str	r2, [sp, #4]
 8001df8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dfa:	6959      	ldr	r1, [r3, #20]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001dfc:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dfe:	064d      	lsls	r5, r1, #25
 8001e00:	f140 8137 	bpl.w	8002072 <HAL_UART_IRQHandler+0x2ca>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e04:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001e06:	6801      	ldr	r1, [r0, #0]
 8001e08:	6849      	ldr	r1, [r1, #4]
 8001e0a:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8001e0c:	2900      	cmp	r1, #0
 8001e0e:	f000 816a 	beq.w	80020e6 <HAL_UART_IRQHandler+0x33e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e12:	4291      	cmp	r1, r2
 8001e14:	f080 8167 	bcs.w	80020e6 <HAL_UART_IRQHandler+0x33e>
        huart->RxXferCount = nb_remaining_rx_data;
 8001e18:	85e1      	strh	r1, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e1a:	69c1      	ldr	r1, [r0, #28]
 8001e1c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001e20:	d036      	beq.n	8001e90 <HAL_UART_IRQHandler+0xe8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e22:	f103 020c 	add.w	r2, r3, #12
 8001e26:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e2e:	f103 050c 	add.w	r5, r3, #12
 8001e32:	e845 2100 	strex	r1, r2, [r5]
 8001e36:	2900      	cmp	r1, #0
 8001e38:	d1f3      	bne.n	8001e22 <HAL_UART_IRQHandler+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e3a:	f103 0214 	add.w	r2, r3, #20
 8001e3e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e42:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e46:	f103 0514 	add.w	r5, r3, #20
 8001e4a:	e845 2100 	strex	r1, r2, [r5]
 8001e4e:	2900      	cmp	r1, #0
 8001e50:	d1f3      	bne.n	8001e3a <HAL_UART_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e52:	f103 0214 	add.w	r2, r3, #20
 8001e56:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5e:	f103 0514 	add.w	r5, r3, #20
 8001e62:	e845 2100 	strex	r1, r2, [r5]
 8001e66:	2900      	cmp	r1, #0
 8001e68:	d1f3      	bne.n	8001e52 <HAL_UART_IRQHandler+0xaa>
          huart->RxState = HAL_UART_STATE_READY;
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e70:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e72:	f103 020c 	add.w	r2, r3, #12
 8001e76:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e7a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e7e:	f103 050c 	add.w	r5, r3, #12
 8001e82:	e845 2100 	strex	r1, r2, [r5]
 8001e86:	2900      	cmp	r1, #0
 8001e88:	d1f3      	bne.n	8001e72 <HAL_UART_IRQHandler+0xca>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e8a:	f7fe ff31 	bl	8000cf0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e8e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e90:	2302      	movs	r3, #2
 8001e92:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e94:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 8001e96:	1a51      	subs	r1, r2, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	b289      	uxth	r1, r1
 8001e9c:	f7ff ff22 	bl	8001ce4 <HAL_UARTEx_RxEventCallback>
 8001ea0:	e79e      	b.n	8001de0 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ea2:	f011 0101 	ands.w	r1, r1, #1
 8001ea6:	d178      	bne.n	8001f9a <HAL_UART_IRQHandler+0x1f2>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ea8:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8001eac:	d08b      	beq.n	8001dc6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001eae:	07d0      	lsls	r0, r2, #31
 8001eb0:	d50a      	bpl.n	8001ec8 <HAL_UART_IRQHandler+0x120>
 8001eb2:	05e8      	lsls	r0, r5, #23
 8001eb4:	f140 80d9 	bpl.w	800206a <HAL_UART_IRQHandler+0x2c2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eb8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8001eba:	f040 0001 	orr.w	r0, r0, #1
 8001ebe:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec0:	0750      	lsls	r0, r2, #29
 8001ec2:	d55b      	bpl.n	8001f7c <HAL_UART_IRQHandler+0x1d4>
 8001ec4:	2900      	cmp	r1, #0
 8001ec6:	d16c      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x1fa>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec8:	0790      	lsls	r0, r2, #30
 8001eca:	d570      	bpl.n	8001fae <HAL_UART_IRQHandler+0x206>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ecc:	0710      	lsls	r0, r2, #28
 8001ece:	f100 80c9 	bmi.w	8002064 <HAL_UART_IRQHandler+0x2bc>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ed2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001ed4:	2900      	cmp	r1, #0
 8001ed6:	d083      	beq.n	8001de0 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ed8:	0691      	lsls	r1, r2, #26
 8001eda:	d509      	bpl.n	8001ef0 <HAL_UART_IRQHandler+0x148>
 8001edc:	06aa      	lsls	r2, r5, #26
 8001ede:	d507      	bpl.n	8001ef0 <HAL_UART_IRQHandler+0x148>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ee0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8001ee4:	2a22      	cmp	r2, #34	@ 0x22
 8001ee6:	d103      	bne.n	8001ef0 <HAL_UART_IRQHandler+0x148>
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7ff fefd 	bl	8001ce8 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ef2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ef4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ef8:	f001 0108 	and.w	r1, r1, #8
 8001efc:	ea52 0501 	orrs.w	r5, r2, r1
 8001f00:	d15c      	bne.n	8001fbc <HAL_UART_IRQHandler+0x214>
        HAL_UART_ErrorCallback(huart);
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7ff fe86 	bl	8001c14 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f08:	6465      	str	r5, [r4, #68]	@ 0x44
 8001f0a:	e769      	b.n	8001de0 <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f0c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8001f10:	2b22      	cmp	r3, #34	@ 0x22
 8001f12:	f47f af65 	bne.w	8001de0 <HAL_UART_IRQHandler+0x38>
}
 8001f16:	b003      	add	sp, #12
 8001f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f1c:	f7ff bee4 	b.w	8001ce8 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f20:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8001f24:	2a21      	cmp	r2, #33	@ 0x21
 8001f26:	f47f af5b 	bne.w	8001de0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f2a:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001f2c:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f2e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8001f32:	f000 80e1 	beq.w	80020f8 <HAL_UART_IRQHandler+0x350>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f36:	1c51      	adds	r1, r2, #1
 8001f38:	6221      	str	r1, [r4, #32]
 8001f3a:	7812      	ldrb	r2, [r2, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001f3e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001f40:	3a01      	subs	r2, #1
 8001f42:	b292      	uxth	r2, r2
 8001f44:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	f47f af4a 	bne.w	8001de0 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f52:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	e740      	b.n	8001de0 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f5e:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f60:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f66:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001f68:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8001f6a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8001f6e:	f7fe fc1d 	bl	80007ac <HAL_UART_TxCpltCallback>
    return;
 8001f72:	e735      	b.n	8001de0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f74:	05e8      	lsls	r0, r5, #23
 8001f76:	d49f      	bmi.n	8001eb8 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f78:	0750      	lsls	r0, r2, #29
 8001f7a:	d412      	bmi.n	8001fa2 <HAL_UART_IRQHandler+0x1fa>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f7c:	0790      	lsls	r0, r2, #30
 8001f7e:	d516      	bpl.n	8001fae <HAL_UART_IRQHandler+0x206>
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d0a3      	beq.n	8001ecc <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001f86:	f041 0104 	orr.w	r1, r1, #4
 8001f8a:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f8c:	0711      	lsls	r1, r2, #28
 8001f8e:	d5a0      	bpl.n	8001ed2 <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001f92:	f041 0108 	orr.w	r1, r1, #8
 8001f96:	6461      	str	r1, [r4, #68]	@ 0x44
 8001f98:	e79b      	b.n	8001ed2 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f9a:	07d0      	lsls	r0, r2, #31
 8001f9c:	d4ea      	bmi.n	8001f74 <HAL_UART_IRQHandler+0x1cc>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f9e:	0750      	lsls	r0, r2, #29
 8001fa0:	d55b      	bpl.n	800205a <HAL_UART_IRQHandler+0x2b2>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fa2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8001fa4:	f040 0002 	orr.w	r0, r0, #2
 8001fa8:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001faa:	0790      	lsls	r0, r2, #30
 8001fac:	d4ea      	bmi.n	8001f84 <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fae:	0710      	lsls	r0, r2, #28
 8001fb0:	d58f      	bpl.n	8001ed2 <HAL_UART_IRQHandler+0x12a>
 8001fb2:	f005 0020 	and.w	r0, r5, #32
 8001fb6:	4308      	orrs	r0, r1
 8001fb8:	d08b      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x12a>
 8001fba:	e7e9      	b.n	8001f90 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fbc:	f103 020c 	add.w	r2, r3, #12
 8001fc0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fc4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc8:	f103 000c 	add.w	r0, r3, #12
 8001fcc:	e840 2100 	strex	r1, r2, [r0]
 8001fd0:	2900      	cmp	r1, #0
 8001fd2:	d1f3      	bne.n	8001fbc <HAL_UART_IRQHandler+0x214>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd4:	f103 0214 	add.w	r2, r3, #20
 8001fd8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe0:	f103 0014 	add.w	r0, r3, #20
 8001fe4:	e840 2100 	strex	r1, r2, [r0]
 8001fe8:	2900      	cmp	r1, #0
 8001fea:	d1f3      	bne.n	8001fd4 <HAL_UART_IRQHandler+0x22c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001fee:	2a01      	cmp	r2, #1
 8001ff0:	d022      	beq.n	8002038 <HAL_UART_IRQHandler+0x290>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ffa:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	0655      	lsls	r5, r2, #25
 8002000:	d527      	bpl.n	8002052 <HAL_UART_IRQHandler+0x2aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002002:	f103 0214 	add.w	r2, r3, #20
 8002006:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800200a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200e:	f103 0014 	add.w	r0, r3, #20
 8002012:	e840 2100 	strex	r1, r2, [r0]
 8002016:	2900      	cmp	r1, #0
 8002018:	d1f3      	bne.n	8002002 <HAL_UART_IRQHandler+0x25a>
          if (huart->hdmarx != NULL)
 800201a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800201c:	b1c8      	cbz	r0, 8002052 <HAL_UART_IRQHandler+0x2aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800201e:	4b3c      	ldr	r3, [pc, #240]	@ (8002110 <HAL_UART_IRQHandler+0x368>)
 8002020:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002022:	f7fe feaf 	bl	8000d84 <HAL_DMA_Abort_IT>
 8002026:	2800      	cmp	r0, #0
 8002028:	f43f aeda 	beq.w	8001de0 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800202c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800202e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8002030:	b003      	add	sp, #12
 8002032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002036:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002038:	f103 020c 	add.w	r2, r3, #12
 800203c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002040:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002044:	f103 000c 	add.w	r0, r3, #12
 8002048:	e840 2100 	strex	r1, r2, [r0]
 800204c:	2900      	cmp	r1, #0
 800204e:	d1f3      	bne.n	8002038 <HAL_UART_IRQHandler+0x290>
 8002050:	e7cf      	b.n	8001ff2 <HAL_UART_IRQHandler+0x24a>
            HAL_UART_ErrorCallback(huart);
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff fdde 	bl	8001c14 <HAL_UART_ErrorCallback>
 8002058:	e6c2      	b.n	8001de0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800205a:	0791      	lsls	r1, r2, #30
 800205c:	d492      	bmi.n	8001f84 <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800205e:	0711      	lsls	r1, r2, #28
 8002060:	d496      	bmi.n	8001f90 <HAL_UART_IRQHandler+0x1e8>
 8002062:	e736      	b.n	8001ed2 <HAL_UART_IRQHandler+0x12a>
 8002064:	06a9      	lsls	r1, r5, #26
 8002066:	d493      	bmi.n	8001f90 <HAL_UART_IRQHandler+0x1e8>
 8002068:	e733      	b.n	8001ed2 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800206a:	0750      	lsls	r0, r2, #29
 800206c:	f53f af2c 	bmi.w	8001ec8 <HAL_UART_IRQHandler+0x120>
 8002070:	e784      	b.n	8001f7c <HAL_UART_IRQHandler+0x1d4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002072:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8002074:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 8002076:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002078:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800207a:	2900      	cmp	r1, #0
 800207c:	f43f aeb0 	beq.w	8001de0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002080:	1a12      	subs	r2, r2, r0
 8002082:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8002084:	2900      	cmp	r1, #0
 8002086:	f43f aeab 	beq.w	8001de0 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208a:	f103 020c 	add.w	r2, r3, #12
 800208e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002092:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002096:	f103 050c 	add.w	r5, r3, #12
 800209a:	e845 2000 	strex	r0, r2, [r5]
 800209e:	2800      	cmp	r0, #0
 80020a0:	d1f3      	bne.n	800208a <HAL_UART_IRQHandler+0x2e2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	f103 0214 	add.w	r2, r3, #20
 80020a6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020aa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ae:	f103 0514 	add.w	r5, r3, #20
 80020b2:	e845 2000 	strex	r0, r2, [r5]
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d1f3      	bne.n	80020a2 <HAL_UART_IRQHandler+0x2fa>
        huart->RxState = HAL_UART_STATE_READY;
 80020ba:	2220      	movs	r2, #32
 80020bc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020c0:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c2:	f103 020c 	add.w	r2, r3, #12
 80020c6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ce:	f103 050c 	add.w	r5, r3, #12
 80020d2:	e845 2000 	strex	r0, r2, [r5]
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d1f3      	bne.n	80020c2 <HAL_UART_IRQHandler+0x31a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020da:	2302      	movs	r3, #2
 80020dc:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff fe00 	bl	8001ce4 <HAL_UARTEx_RxEventCallback>
 80020e4:	e67c      	b.n	8001de0 <HAL_UART_IRQHandler+0x38>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80020e6:	4291      	cmp	r1, r2
 80020e8:	f47f ae7a 	bne.w	8001de0 <HAL_UART_IRQHandler+0x38>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80020ec:	69c3      	ldr	r3, [r0, #28]
 80020ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020f2:	f47f ae75 	bne.w	8001de0 <HAL_UART_IRQHandler+0x38>
 80020f6:	e7f0      	b.n	80020da <HAL_UART_IRQHandler+0x332>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f8:	6921      	ldr	r1, [r4, #16]
 80020fa:	2900      	cmp	r1, #0
 80020fc:	f47f af1b 	bne.w	8001f36 <HAL_UART_IRQHandler+0x18e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002100:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002104:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002108:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800210a:	6222      	str	r2, [r4, #32]
 800210c:	e717      	b.n	8001f3e <HAL_UART_IRQHandler+0x196>
 800210e:	bf00      	nop
 8002110:	08001cd5 	.word	0x08001cd5

08002114 <__libc_init_array>:
 8002114:	b570      	push	{r4, r5, r6, lr}
 8002116:	4d0d      	ldr	r5, [pc, #52]	@ (800214c <__libc_init_array+0x38>)
 8002118:	4c0d      	ldr	r4, [pc, #52]	@ (8002150 <__libc_init_array+0x3c>)
 800211a:	1b64      	subs	r4, r4, r5
 800211c:	10a4      	asrs	r4, r4, #2
 800211e:	2600      	movs	r6, #0
 8002120:	42a6      	cmp	r6, r4
 8002122:	d109      	bne.n	8002138 <__libc_init_array+0x24>
 8002124:	4d0b      	ldr	r5, [pc, #44]	@ (8002154 <__libc_init_array+0x40>)
 8002126:	4c0c      	ldr	r4, [pc, #48]	@ (8002158 <__libc_init_array+0x44>)
 8002128:	f000 f818 	bl	800215c <_init>
 800212c:	1b64      	subs	r4, r4, r5
 800212e:	10a4      	asrs	r4, r4, #2
 8002130:	2600      	movs	r6, #0
 8002132:	42a6      	cmp	r6, r4
 8002134:	d105      	bne.n	8002142 <__libc_init_array+0x2e>
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	f855 3b04 	ldr.w	r3, [r5], #4
 800213c:	4798      	blx	r3
 800213e:	3601      	adds	r6, #1
 8002140:	e7ee      	b.n	8002120 <__libc_init_array+0xc>
 8002142:	f855 3b04 	ldr.w	r3, [r5], #4
 8002146:	4798      	blx	r3
 8002148:	3601      	adds	r6, #1
 800214a:	e7f2      	b.n	8002132 <__libc_init_array+0x1e>
 800214c:	0800219c 	.word	0x0800219c
 8002150:	0800219c 	.word	0x0800219c
 8002154:	0800219c 	.word	0x0800219c
 8002158:	080021a0 	.word	0x080021a0

0800215c <_init>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	bf00      	nop
 8002160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002162:	bc08      	pop	{r3}
 8002164:	469e      	mov	lr, r3
 8002166:	4770      	bx	lr

08002168 <_fini>:
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	bf00      	nop
 800216c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216e:	bc08      	pop	{r3}
 8002170:	469e      	mov	lr, r3
 8002172:	4770      	bx	lr
